/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

static float4x4 g_matrixMulLHS_float4x4    = float4x4( 		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		18.000000f, 18.000000f, 18.000000f, 18.000000f
 );

static float4x4 g_matrixMulRHS_float4x4    = float4x4( 		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
 );

static float4x4 g_matrixMulAnswer_float4x4 = float4x4( 		72.000000f, 72.000000f, 72.000000f, 72.000000f,
		72.000000f, 72.000000f, 72.000000f, 72.000000f,
		144.000000f, 144.000000f, 144.000000f, 144.000000f,
		216.000000f, 216.000000f, 216.000000f, 216.000000f
 );


TEMPER_TEST( TestAssignment_float4x4, void )
{
	float4x4 mat;

	mat.rows[0] = float4( 999.000000f, 0.000000f, 0.000000f, 0.000000f );
	mat.rows[1] = float4( 0.000000f, 999.000000f, 0.000000f, 0.000000f );
	mat.rows[2] = float4( 0.000000f, 0.000000f, 999.000000f, 0.000000f );
	mat.rows[3] = float4( 0.000000f, 0.000000f, 0.000000f, 999.000000f );

	TEMPER_EXPECT_TRUE( mat.rows[0].x == 999.0f );
	TEMPER_EXPECT_TRUE( mat.rows[0].y == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[0].z == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[0].w == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[1].x == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[1].y == 999.0f );
	TEMPER_EXPECT_TRUE( mat.rows[1].z == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[1].w == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[2].x == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[2].y == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[2].z == 999.0f );
	TEMPER_EXPECT_TRUE( mat.rows[2].w == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[3].x == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[3].y == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[3].z == 0.0f );
	TEMPER_EXPECT_TRUE( mat.rows[3].w == 999.0f );

	TEMPER_PASS();
}

TEMPER_TEST( TestCtor_float4x4, void )
{
	float4x4 mat;

	// fill single value
	mat = float4x4( 999.0f );
	TEMPER_EXPECT_TRUE( mat[0] == float4( 999.000000f, 0.000000f, 0.000000f, 0.000000f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float4( 0.000000f, 999.000000f, 0.000000f, 0.000000f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float4( 0.000000f, 0.000000f, 999.000000f, 0.000000f ) );
	TEMPER_EXPECT_TRUE( mat[3] == float4( 0.000000f, 0.000000f, 0.000000f, 999.000000f ) );

	// row filling
	mat = float4x4(
		float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ),
		float4( 4.000000f, 5.000000f, 6.000000f, 7.000000f ),
		float4( 8.000000f, 9.000000f, 10.000000f, 11.000000f ),
		float4( 12.000000f, 13.000000f, 14.000000f, 15.000000f )
	);
	TEMPER_EXPECT_TRUE( mat[0] == float4( 0.000000f, 1.000000f, 2.000000f, 3.000000f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float4( 4.000000f, 5.000000f, 6.000000f, 7.000000f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float4( 8.000000f, 9.000000f, 10.000000f, 11.000000f ) );
	TEMPER_EXPECT_TRUE( mat[3] == float4( 12.000000f, 13.000000f, 14.000000f, 15.000000f ) );

	// all values filled
	mat = float4x4(
		16.000000f, 15.000000f, 14.000000f, 13.000000f,
		12.000000f, 11.000000f, 10.000000f, 9.000000f,
		8.000000f, 7.000000f, 6.000000f, 5.000000f,
		4.000000f, 3.000000f, 2.000000f, 1.000000f
	);
	TEMPER_EXPECT_TRUE( mat[0] == float4( 16.000000f, 15.000000f, 14.000000f, 13.000000f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float4( 12.000000f, 11.000000f, 10.000000f, 9.000000f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float4( 8.000000f, 7.000000f, 6.000000f, 5.000000f ) );
	TEMPER_EXPECT_TRUE( mat[3] == float4( 4.000000f, 3.000000f, 2.000000f, 1.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestArray_float4x4, void )
{
	float4x4 mat;
	identity( mat );

	TEMPER_EXPECT_TRUE( mat[0] == float4( 1.0f, 0.0f, 0.0f, 0.0f ) );
	TEMPER_EXPECT_TRUE( mat[1] == float4( 0.0f, 1.0f, 0.0f, 0.0f ) );
	TEMPER_EXPECT_TRUE( mat[2] == float4( 0.0f, 0.0f, 1.0f, 0.0f ) );
	TEMPER_EXPECT_TRUE( mat[3] == float4( 0.0f, 0.0f, 0.0f, 1.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestIncrement_float4x4, void )
{
	float4x4 answer;
	float4x4 mat;

	// prefix
	answer = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	);

	mat = float4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f

	);
	++mat;
	TEMPER_EXPECT_TRUE( mat == answer );

	// postfix
	answer = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
	);

	mat = float4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f

	);
	mat++;
	TEMPER_EXPECT_TRUE( mat == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestDecrement_float4x4, void )
{
	float4x4 answer;
	float4x4 mat;

	// prefix
	answer = float4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	);

	mat = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f

	);
	--mat;
	TEMPER_EXPECT_TRUE( mat == answer );

	// postfix
	answer = float4x4(
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 0.000000f
	);

	mat = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f

	);
	mat--;
	TEMPER_EXPECT_TRUE( mat == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Addition_float4x4, void )
{
	float4x4 answer = float4x4(
		7.000000f, 7.000000f, 7.000000f, 7.000000f,
		8.000000f, 8.000000f, 8.000000f, 8.000000f,
		15.000000f, 15.000000f, 15.000000f, 15.000000f,
		24.000000f, 24.000000f, 24.000000f, 24.000000f
	);

	float4x4 a = float4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		18.000000f, 18.000000f, 18.000000f, 18.000000f
	);

	float4x4 b = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
	);

	float4x4 c = comp_addm( a, b );

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Subtraction_float4x4, void )
{
	float4x4 answer = float4x4(
		5.000000f, 5.000000f, 5.000000f, 5.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		9.000000f, 9.000000f, 9.000000f, 9.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f
	);

	float4x4 a = float4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		18.000000f, 18.000000f, 18.000000f, 18.000000f
	);

	float4x4 b = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
	);

	float4x4 c = comp_subm( a, b );

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Multiplication_float4x4, void )
{
	float4x4 answer = float4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		36.000000f, 36.000000f, 36.000000f, 36.000000f,
		108.000000f, 108.000000f, 108.000000f, 108.000000f
	);

	float4x4 a = float4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		18.000000f, 18.000000f, 18.000000f, 18.000000f
	);

	float4x4 b = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
	);

	float4x4 c = comp_mulm( a, b );

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_Scalar_Division_float4x4, void )
{
	float4x4 answer = float4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
	);

	float4x4 a = float4x4(
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f,
		12.000000f, 12.000000f, 12.000000f, 12.000000f,
		18.000000f, 18.000000f, 18.000000f, 18.000000f
	);

	float4x4 b = float4x4(
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		6.000000f, 6.000000f, 6.000000f, 6.000000f
	);

	float4x4 c = comp_divm( a, b );

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_SSE_Addition_float4x4, void )
{
	float a00[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a01[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a02[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a03[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a10[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a11[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a12[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a13[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a20[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a21[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a22[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a23[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a30[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a31[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a32[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a33[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };

	float b00[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b01[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b02[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b03[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b10[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b11[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b12[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b13[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b20[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b21[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b22[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b23[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b30[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b31[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b32[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b33[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };

	float4x4_sse_t results;
	float4x4_sse_t lhs;
	float4x4_sse_t rhs;
	lhs.m[0][0] = _mm_load_ps( a00 );
	lhs.m[0][1] = _mm_load_ps( a01 );
	lhs.m[0][2] = _mm_load_ps( a02 );
	lhs.m[0][3] = _mm_load_ps( a03 );
	lhs.m[1][0] = _mm_load_ps( a10 );
	lhs.m[1][1] = _mm_load_ps( a11 );
	lhs.m[1][2] = _mm_load_ps( a12 );
	lhs.m[1][3] = _mm_load_ps( a13 );
	lhs.m[2][0] = _mm_load_ps( a20 );
	lhs.m[2][1] = _mm_load_ps( a21 );
	lhs.m[2][2] = _mm_load_ps( a22 );
	lhs.m[2][3] = _mm_load_ps( a23 );
	lhs.m[3][0] = _mm_load_ps( a30 );
	lhs.m[3][1] = _mm_load_ps( a31 );
	lhs.m[3][2] = _mm_load_ps( a32 );
	lhs.m[3][3] = _mm_load_ps( a33 );

	rhs.m[0][0] = _mm_load_ps( b00 );
	rhs.m[0][1] = _mm_load_ps( b01 );
	rhs.m[0][2] = _mm_load_ps( b02 );
	rhs.m[0][3] = _mm_load_ps( b03 );
	rhs.m[1][0] = _mm_load_ps( b10 );
	rhs.m[1][1] = _mm_load_ps( b11 );
	rhs.m[1][2] = _mm_load_ps( b12 );
	rhs.m[1][3] = _mm_load_ps( b13 );
	rhs.m[2][0] = _mm_load_ps( b20 );
	rhs.m[2][1] = _mm_load_ps( b21 );
	rhs.m[2][2] = _mm_load_ps( b22 );
	rhs.m[2][3] = _mm_load_ps( b23 );
	rhs.m[3][0] = _mm_load_ps( b30 );
	rhs.m[3][1] = _mm_load_ps( b31 );
	rhs.m[3][2] = _mm_load_ps( b32 );
	rhs.m[3][3] = _mm_load_ps( b33 );

	comp_addm_sse( &lhs, &rhs, &results );

	float arithmeticResults[4];

	_mm_store_ps( arithmeticResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 7.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 7.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 7.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 7.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 8.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 8.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 8.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 8.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 15.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 15.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 15.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 15.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 24.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 24.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 24.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 24.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 24.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_SSE_Subtraction_float4x4, void )
{
	float a00[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a01[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a02[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a03[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a10[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a11[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a12[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a13[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a20[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a21[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a22[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a23[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a30[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a31[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a32[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a33[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };

	float b00[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b01[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b02[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b03[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b10[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b11[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b12[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b13[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b20[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b21[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b22[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b23[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b30[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b31[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b32[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b33[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };

	float4x4_sse_t results;
	float4x4_sse_t lhs;
	float4x4_sse_t rhs;
	lhs.m[0][0] = _mm_load_ps( a00 );
	lhs.m[0][1] = _mm_load_ps( a01 );
	lhs.m[0][2] = _mm_load_ps( a02 );
	lhs.m[0][3] = _mm_load_ps( a03 );
	lhs.m[1][0] = _mm_load_ps( a10 );
	lhs.m[1][1] = _mm_load_ps( a11 );
	lhs.m[1][2] = _mm_load_ps( a12 );
	lhs.m[1][3] = _mm_load_ps( a13 );
	lhs.m[2][0] = _mm_load_ps( a20 );
	lhs.m[2][1] = _mm_load_ps( a21 );
	lhs.m[2][2] = _mm_load_ps( a22 );
	lhs.m[2][3] = _mm_load_ps( a23 );
	lhs.m[3][0] = _mm_load_ps( a30 );
	lhs.m[3][1] = _mm_load_ps( a31 );
	lhs.m[3][2] = _mm_load_ps( a32 );
	lhs.m[3][3] = _mm_load_ps( a33 );

	rhs.m[0][0] = _mm_load_ps( b00 );
	rhs.m[0][1] = _mm_load_ps( b01 );
	rhs.m[0][2] = _mm_load_ps( b02 );
	rhs.m[0][3] = _mm_load_ps( b03 );
	rhs.m[1][0] = _mm_load_ps( b10 );
	rhs.m[1][1] = _mm_load_ps( b11 );
	rhs.m[1][2] = _mm_load_ps( b12 );
	rhs.m[1][3] = _mm_load_ps( b13 );
	rhs.m[2][0] = _mm_load_ps( b20 );
	rhs.m[2][1] = _mm_load_ps( b21 );
	rhs.m[2][2] = _mm_load_ps( b22 );
	rhs.m[2][3] = _mm_load_ps( b23 );
	rhs.m[3][0] = _mm_load_ps( b30 );
	rhs.m[3][1] = _mm_load_ps( b31 );
	rhs.m[3][2] = _mm_load_ps( b32 );
	rhs.m[3][3] = _mm_load_ps( b33 );

	comp_subm_sse( &lhs, &rhs, &results );

	float arithmeticResults[4];

	_mm_store_ps( arithmeticResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 5.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 5.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 5.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 5.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 9.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 9.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 9.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 9.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_SSE_Multiplication_float4x4, void )
{
	float a00[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a01[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a02[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a03[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a10[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a11[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a12[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a13[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a20[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a21[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a22[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a23[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a30[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a31[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a32[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a33[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };

	float b00[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b01[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b02[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b03[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b10[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b11[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b12[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b13[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b20[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b21[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b22[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b23[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b30[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b31[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b32[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b33[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };

	float4x4_sse_t results;
	float4x4_sse_t lhs;
	float4x4_sse_t rhs;
	lhs.m[0][0] = _mm_load_ps( a00 );
	lhs.m[0][1] = _mm_load_ps( a01 );
	lhs.m[0][2] = _mm_load_ps( a02 );
	lhs.m[0][3] = _mm_load_ps( a03 );
	lhs.m[1][0] = _mm_load_ps( a10 );
	lhs.m[1][1] = _mm_load_ps( a11 );
	lhs.m[1][2] = _mm_load_ps( a12 );
	lhs.m[1][3] = _mm_load_ps( a13 );
	lhs.m[2][0] = _mm_load_ps( a20 );
	lhs.m[2][1] = _mm_load_ps( a21 );
	lhs.m[2][2] = _mm_load_ps( a22 );
	lhs.m[2][3] = _mm_load_ps( a23 );
	lhs.m[3][0] = _mm_load_ps( a30 );
	lhs.m[3][1] = _mm_load_ps( a31 );
	lhs.m[3][2] = _mm_load_ps( a32 );
	lhs.m[3][3] = _mm_load_ps( a33 );

	rhs.m[0][0] = _mm_load_ps( b00 );
	rhs.m[0][1] = _mm_load_ps( b01 );
	rhs.m[0][2] = _mm_load_ps( b02 );
	rhs.m[0][3] = _mm_load_ps( b03 );
	rhs.m[1][0] = _mm_load_ps( b10 );
	rhs.m[1][1] = _mm_load_ps( b11 );
	rhs.m[1][2] = _mm_load_ps( b12 );
	rhs.m[1][3] = _mm_load_ps( b13 );
	rhs.m[2][0] = _mm_load_ps( b20 );
	rhs.m[2][1] = _mm_load_ps( b21 );
	rhs.m[2][2] = _mm_load_ps( b22 );
	rhs.m[2][3] = _mm_load_ps( b23 );
	rhs.m[3][0] = _mm_load_ps( b30 );
	rhs.m[3][1] = _mm_load_ps( b31 );
	rhs.m[3][2] = _mm_load_ps( b32 );
	rhs.m[3][3] = _mm_load_ps( b33 );

	comp_mulm_sse( &lhs, &rhs, &results );

	float arithmeticResults[4];

	_mm_store_ps( arithmeticResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 12.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 36.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 36.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 36.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 36.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 36.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 108.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 108.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 108.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 108.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 108.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestComponentWiseArithmetic_SSE_Division_float4x4, void )
{
	float a00[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a01[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a02[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a03[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a10[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a11[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a12[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a13[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a20[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a21[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a22[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a23[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a30[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a31[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a32[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a33[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };

	float b00[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b01[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b02[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b03[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b10[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b11[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b12[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b13[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b20[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b21[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b22[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b23[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b30[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b31[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b32[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b33[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };

	float4x4_sse_t results;
	float4x4_sse_t lhs;
	float4x4_sse_t rhs;
	lhs.m[0][0] = _mm_load_ps( a00 );
	lhs.m[0][1] = _mm_load_ps( a01 );
	lhs.m[0][2] = _mm_load_ps( a02 );
	lhs.m[0][3] = _mm_load_ps( a03 );
	lhs.m[1][0] = _mm_load_ps( a10 );
	lhs.m[1][1] = _mm_load_ps( a11 );
	lhs.m[1][2] = _mm_load_ps( a12 );
	lhs.m[1][3] = _mm_load_ps( a13 );
	lhs.m[2][0] = _mm_load_ps( a20 );
	lhs.m[2][1] = _mm_load_ps( a21 );
	lhs.m[2][2] = _mm_load_ps( a22 );
	lhs.m[2][3] = _mm_load_ps( a23 );
	lhs.m[3][0] = _mm_load_ps( a30 );
	lhs.m[3][1] = _mm_load_ps( a31 );
	lhs.m[3][2] = _mm_load_ps( a32 );
	lhs.m[3][3] = _mm_load_ps( a33 );

	rhs.m[0][0] = _mm_load_ps( b00 );
	rhs.m[0][1] = _mm_load_ps( b01 );
	rhs.m[0][2] = _mm_load_ps( b02 );
	rhs.m[0][3] = _mm_load_ps( b03 );
	rhs.m[1][0] = _mm_load_ps( b10 );
	rhs.m[1][1] = _mm_load_ps( b11 );
	rhs.m[1][2] = _mm_load_ps( b12 );
	rhs.m[1][3] = _mm_load_ps( b13 );
	rhs.m[2][0] = _mm_load_ps( b20 );
	rhs.m[2][1] = _mm_load_ps( b21 );
	rhs.m[2][2] = _mm_load_ps( b22 );
	rhs.m[2][3] = _mm_load_ps( b23 );
	rhs.m[3][0] = _mm_load_ps( b30 );
	rhs.m[3][1] = _mm_load_ps( b31 );
	rhs.m[3][2] = _mm_load_ps( b32 );
	rhs.m[3][3] = _mm_load_ps( b33 );

	comp_divm_sse( &lhs, &rhs, &results );

	float arithmeticResults[4];

	_mm_store_ps( arithmeticResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 6.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 4.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	_mm_store_ps( arithmeticResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( arithmeticResults[3], 3.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestMultiplyMatrix_Scalar_float4x4, void )
{
	float4x4 answer = g_matrixMulAnswer_float4x4;

	float4x4 a = g_matrixMulLHS_float4x4;
	float4x4 b = g_matrixMulRHS_float4x4;
	float4x4 c = a * b;

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestMultiplyMatrix_SSE_float4x4, void )
{
	float a00[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a01[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a02[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a03[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a10[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a11[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a12[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a13[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float a20[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a21[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a22[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a23[4] =	{ 12.000000f, 12.000000f, 12.000000f, 12.000000f };
	float a30[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a31[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a32[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };
	float a33[4] =	{ 18.000000f, 18.000000f, 18.000000f, 18.000000f };

	float b00[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b01[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b02[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b03[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float b10[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b11[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b12[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b13[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float b20[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b21[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b22[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b23[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float b30[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b31[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b32[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float b33[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };

	float4x4_sse_t results;
	float4x4_sse_t lhs;
	float4x4_sse_t rhs;
	lhs.m[0][0] = _mm_load_ps( a00 );
	lhs.m[0][1] = _mm_load_ps( a01 );
	lhs.m[0][2] = _mm_load_ps( a02 );
	lhs.m[0][3] = _mm_load_ps( a03 );
	lhs.m[1][0] = _mm_load_ps( a10 );
	lhs.m[1][1] = _mm_load_ps( a11 );
	lhs.m[1][2] = _mm_load_ps( a12 );
	lhs.m[1][3] = _mm_load_ps( a13 );
	lhs.m[2][0] = _mm_load_ps( a20 );
	lhs.m[2][1] = _mm_load_ps( a21 );
	lhs.m[2][2] = _mm_load_ps( a22 );
	lhs.m[2][3] = _mm_load_ps( a23 );
	lhs.m[3][0] = _mm_load_ps( a30 );
	lhs.m[3][1] = _mm_load_ps( a31 );
	lhs.m[3][2] = _mm_load_ps( a32 );
	lhs.m[3][3] = _mm_load_ps( a33 );

	rhs.m[0][0] = _mm_load_ps( b00 );
	rhs.m[0][1] = _mm_load_ps( b01 );
	rhs.m[0][2] = _mm_load_ps( b02 );
	rhs.m[0][3] = _mm_load_ps( b03 );
	rhs.m[1][0] = _mm_load_ps( b10 );
	rhs.m[1][1] = _mm_load_ps( b11 );
	rhs.m[1][2] = _mm_load_ps( b12 );
	rhs.m[1][3] = _mm_load_ps( b13 );
	rhs.m[2][0] = _mm_load_ps( b20 );
	rhs.m[2][1] = _mm_load_ps( b21 );
	rhs.m[2][2] = _mm_load_ps( b22 );
	rhs.m[2][3] = _mm_load_ps( b23 );
	rhs.m[3][0] = _mm_load_ps( b30 );
	rhs.m[3][1] = _mm_load_ps( b31 );
	rhs.m[3][2] = _mm_load_ps( b32 );
	rhs.m[3][3] = _mm_load_ps( b33 );

	mul_sse( &lhs, &rhs, &results );

	float mulResults[4];

	_mm_store_ps( mulResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[0].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[0].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[0].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[0].x ) );

	_mm_store_ps( mulResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[0].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[0].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[0].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[0].y ) );

	_mm_store_ps( mulResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[0].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[0].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[0].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[0].z ) );

	_mm_store_ps( mulResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[0].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[0].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[0].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[0].w ) );

	_mm_store_ps( mulResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[1].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[1].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[1].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[1].x ) );

	_mm_store_ps( mulResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[1].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[1].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[1].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[1].y ) );

	_mm_store_ps( mulResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[1].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[1].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[1].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[1].z ) );

	_mm_store_ps( mulResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[1].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[1].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[1].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[1].w ) );

	_mm_store_ps( mulResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[2].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[2].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[2].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[2].x ) );

	_mm_store_ps( mulResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[2].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[2].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[2].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[2].y ) );

	_mm_store_ps( mulResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[2].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[2].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[2].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[2].z ) );

	_mm_store_ps( mulResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[2].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[2].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[2].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[2].w ) );

	_mm_store_ps( mulResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[3].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[3].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[3].x ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[3].x ) );

	_mm_store_ps( mulResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[3].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[3].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[3].y ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[3].y ) );

	_mm_store_ps( mulResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[3].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[3].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[3].z ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[3].z ) );

	_mm_store_ps( mulResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq( mulResults[0], g_matrixMulAnswer_float4x4.rows[3].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[1], g_matrixMulAnswer_float4x4.rows[3].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[2], g_matrixMulAnswer_float4x4.rows[3].w ) );
	TEMPER_EXPECT_TRUE( floateq( mulResults[3], g_matrixMulAnswer_float4x4.rows[3].w ) );


	TEMPER_PASS();
}

TEMPER_TEST( TestMultiplyVector_float4x4, void )
{
	float4 answerVec = { 28.000000f, 68.000000f, 108.000000f, 148.000000f };

	float4x4 a = float4x4(
		1.000000f, 2.000000f, 3.000000f, 4.000000f,
		5.000000f, 6.000000f, 7.000000f, 8.000000f,
		9.000000f, 10.000000f, 11.000000f, 12.000000f,
		13.000000f, 14.000000f, 15.000000f, 16.000000f
	);
	float4 b = { 2.000000f, 1.000000f, 4.000000f, 3.000000f };
	float4 c = a * b;

	TEMPER_EXPECT_TRUE( c == answerVec );

	TEMPER_PASS();
}

TEMPER_TEST( TestDivideMatrix_float4x4, void )
{
	float4x4 answer = float4x4( 		1.000000f, 0.0f, 0.0f, 0.0f,
		0.0f, 1.000000f, 0.0f, 0.0f,
		0.0f, 0.0f, 1.000000f, 0.0f,
		0.0f, 0.0f, 0.0f, 1.000000f
 );

	float4x4 a = float4x4( 		6.000000f, 2.000000f, 3.000000f, 4.000000f,
		2.000000f, 7.000000f, 5.000000f, 3.000000f,
		3.000000f, 5.000000f, 7.000000f, 2.000000f,
		4.000000f, 3.000000f, 2.000000f, 6.000000f
 );
	float4x4 b = float4x4( 		6.000000f, 2.000000f, 3.000000f, 4.000000f,
		2.000000f, 7.000000f, 5.000000f, 3.000000f,
		3.000000f, 5.000000f, 7.000000f, 2.000000f,
		4.000000f, 3.000000f, 2.000000f, 6.000000f
 );
	float4x4 c = a / b;

	TEMPER_EXPECT_TRUE( c == answer );

	TEMPER_PASS();
}

TEMPER_TEST( TestRelational_float4x4, void )
{
	bool4x4 allTrue = { 		true, true, true, true,
		true, true, true, true,
		true, true, true, true,
		true, true, true, true
 };

	float4x4 mat0 = float4x4( 		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f,
		1.000000f, 1.000000f, 1.000000f, 1.000000f
 );
	float4x4 mat1 = float4x4( 		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f,
		2.000000f, 2.000000f, 2.000000f, 2.000000f
 );
	float4x4 mat2 = float4x4( 		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f,
		3.000000f, 3.000000f, 3.000000f, 3.000000f
 );
	float4x4 mat3 = float4x4( 		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f,
		4.000000f, 4.000000f, 4.000000f, 4.000000f
 );

	bool4x4 test0  = mat0 <= mat0;
	bool4x4 test1  = mat0 >= mat0;
	bool4x4 test2  = mat0 <  mat1;
	bool4x4 test3  = mat0 <  mat2;
	bool4x4 test4  = mat0 <  mat3;

	bool4x4 test5  = mat1 >  mat0;
	bool4x4 test6  = mat1 <= mat1;
	bool4x4 test7  = mat1 >= mat1;
	bool4x4 test8  = mat1 <  mat2;
	bool4x4 test9  = mat1 <  mat3;

	bool4x4 test10 = mat2 >  mat0;
	bool4x4 test11 = mat2 >  mat1;
	bool4x4 test12 = mat2 <= mat2;
	bool4x4 test13 = mat2 >= mat2;
	bool4x4 test14 = mat2 <  mat3;

	bool4x4 test15 = mat3 >  mat0;
	bool4x4 test16 = mat3 >  mat1;
	bool4x4 test17 = mat3 >  mat2;
	bool4x4 test18 = mat3 <= mat3;
	bool4x4 test19 = mat3 >= mat3;

	TEMPER_EXPECT_TRUE( test0  == allTrue );
	TEMPER_EXPECT_TRUE( test1  == allTrue );
	TEMPER_EXPECT_TRUE( test2  == allTrue );
	TEMPER_EXPECT_TRUE( test3  == allTrue );
	TEMPER_EXPECT_TRUE( test4  == allTrue );

	TEMPER_EXPECT_TRUE( test5  == allTrue );
	TEMPER_EXPECT_TRUE( test6  == allTrue );
	TEMPER_EXPECT_TRUE( test7  == allTrue );
	TEMPER_EXPECT_TRUE( test8  == allTrue );
	TEMPER_EXPECT_TRUE( test9  == allTrue );

	TEMPER_EXPECT_TRUE( test10 == allTrue );
	TEMPER_EXPECT_TRUE( test11 == allTrue );
	TEMPER_EXPECT_TRUE( test12 == allTrue );
	TEMPER_EXPECT_TRUE( test13 == allTrue );
	TEMPER_EXPECT_TRUE( test14 == allTrue );

	TEMPER_EXPECT_TRUE( test15 == allTrue );
	TEMPER_EXPECT_TRUE( test16 == allTrue );
	TEMPER_EXPECT_TRUE( test17 == allTrue );
	TEMPER_EXPECT_TRUE( test18 == allTrue );
	TEMPER_EXPECT_TRUE( test19 == allTrue );

	TEMPER_PASS();
}

TEMPER_TEST( TestIdentity_Scalar_float4x4, void )
{
	float4x4 id;
	id[0] = float4( 1.000000f, 0.000000f, 0.000000f, 0.000000f );
	id[1] = float4( 0.000000f, 1.000000f, 0.000000f, 0.000000f );
	id[2] = float4( 0.000000f, 0.000000f, 1.000000f, 0.000000f );
	id[3] = float4( 0.000000f, 0.000000f, 0.000000f, 1.000000f );

	float4x4 mat;

	identity( mat );
	TEMPER_EXPECT_TRUE( mat == id );

	TEMPER_PASS();
}

TEMPER_TEST( TestIdentity_SSE_float4x4, void )
{
	float4x4_sse_t matSSE;
	identity_sse( &matSSE );

	float identityResults[4];
	_mm_store_ps( identityResults, matSSE.m[0][0] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 1.0f );

	_mm_store_ps( identityResults, matSSE.m[0][1] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[0][2] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[0][3] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[1][0] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[1][1] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 1.0f );

	_mm_store_ps( identityResults, matSSE.m[1][2] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[1][3] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[2][0] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[2][1] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[2][2] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 1.0f );

	_mm_store_ps( identityResults, matSSE.m[2][3] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[3][0] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[3][1] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[3][2] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 0.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 0.0f );

	_mm_store_ps( identityResults, matSSE.m[3][3] );
	TEMPER_EXPECT_TRUE( identityResults[0] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[1] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[2] == 1.0f );
	TEMPER_EXPECT_TRUE( identityResults[3] == 1.0f );

	TEMPER_PASS();
}

TEMPER_TEST( TestTranspose_Scalar_float4x4, void )
{
	float4x4 answerTransposed = float4x4(
		0.000000f, 4.000000f, 8.000000f, 12.000000f,
		1.000000f, 5.000000f, 9.000000f, 13.000000f,
		2.000000f, 6.000000f, 10.000000f, 14.000000f,
		3.000000f, 7.000000f, 11.000000f, 15.000000f
	);

	float4x4 mat = float4x4(
		0.000000f, 1.000000f, 2.000000f, 3.000000f,
		4.000000f, 5.000000f, 6.000000f, 7.000000f,
		8.000000f, 9.000000f, 10.000000f, 11.000000f,
		12.000000f, 13.000000f, 14.000000f, 15.000000f
	);
	float4x4 trans = transpose( mat );

	TEMPER_EXPECT_TRUE( trans == answerTransposed );

	TEMPER_PASS();
}

TEMPER_TEST( TestTranspose_SSE_float4x4, void )
{
	float4x4_sse_t results;
	float4x4_sse_t in;

	// row 0
	in.m[0][0] = _mm_set1_ps( 0.0f );
	in.m[0][1] = _mm_set1_ps( 1.0f );
	in.m[0][2] = _mm_set1_ps( 2.0f );
	in.m[0][3] = _mm_set1_ps( 3.0f );

	// row 1
	in.m[1][0] = _mm_set1_ps( 4.0f );
	in.m[1][1] = _mm_set1_ps( 5.0f );
	in.m[1][2] = _mm_set1_ps( 6.0f );
	in.m[1][3] = _mm_set1_ps( 7.0f );

	// row 2
	in.m[2][0] = _mm_set1_ps( 8.0f );
	in.m[2][1] = _mm_set1_ps( 9.0f );
	in.m[2][2] = _mm_set1_ps( 10.0f );
	in.m[2][3] = _mm_set1_ps( 11.0f );

	// row 3
	in.m[3][0] = _mm_set1_ps( 12.0f );
	in.m[3][1] = _mm_set1_ps( 13.0f );
	in.m[3][2] = _mm_set1_ps( 14.0f );
	in.m[3][3] = _mm_set1_ps( 15.0f );

	transpose_sse( &in, &results );

	float transposeResults[4];
	_mm_store_ps( transposeResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 0.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 0.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 0.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 0.000000f ) );

	_mm_store_ps( transposeResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 4.000000f ) );

	_mm_store_ps( transposeResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 8.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 8.000000f ) );

	_mm_store_ps( transposeResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 12.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 12.000000f ) );

	_mm_store_ps( transposeResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 1.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 1.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 1.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 1.000000f ) );

	_mm_store_ps( transposeResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 5.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 5.000000f ) );

	_mm_store_ps( transposeResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 9.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 9.000000f ) );

	_mm_store_ps( transposeResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 13.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 13.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 13.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 13.000000f ) );

	_mm_store_ps( transposeResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 2.000000f ) );

	_mm_store_ps( transposeResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 6.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 6.000000f ) );

	_mm_store_ps( transposeResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 10.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 10.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 10.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 10.000000f ) );

	_mm_store_ps( transposeResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 14.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 14.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 14.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 14.000000f ) );

	_mm_store_ps( transposeResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 3.000000f ) );

	_mm_store_ps( transposeResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 7.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 7.000000f ) );

	_mm_store_ps( transposeResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 11.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 11.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 11.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 11.000000f ) );

	_mm_store_ps( transposeResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[0], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[1], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[2], 15.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( transposeResults[3], 15.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestDeterminant_Scalar_float4x4, void )
{
	float4x4 mat = float4x4(
		6.000000f, 2.000000f, 3.000000f, 4.000000f,
		2.000000f, 7.000000f, 5.000000f, 3.000000f,
		3.000000f, 5.000000f, 7.000000f, 2.000000f,
		4.000000f, 3.000000f, 2.000000f, 6.000000f
	);

	float det = determinant( mat );

	TEMPER_EXPECT_TRUE( floateq( det, 285.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestDeterminant_SSE_float4x4, void )
{
	float m00[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };
	float m01[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m02[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float m03[4] =	{ 4.000000f, 4.000000f, 4.000000f, 4.000000f };
	float m10[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m11[4] =	{ 7.000000f, 7.000000f, 7.000000f, 7.000000f };
	float m12[4] =	{ 5.000000f, 5.000000f, 5.000000f, 5.000000f };
	float m13[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float m20[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float m21[4] =	{ 5.000000f, 5.000000f, 5.000000f, 5.000000f };
	float m22[4] =	{ 7.000000f, 7.000000f, 7.000000f, 7.000000f };
	float m23[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m30[4] =	{ 4.000000f, 4.000000f, 4.000000f, 4.000000f };
	float m31[4] =	{ 3.000000f, 3.000000f, 3.000000f, 3.000000f };
	float m32[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m33[4] =	{ 6.000000f, 6.000000f, 6.000000f, 6.000000f };

	__m128 results;
	float4x4_sse_t in;
	in.m[0][0] = _mm_load_ps( m00 );
	in.m[0][1] = _mm_load_ps( m01 );
	in.m[0][2] = _mm_load_ps( m02 );
	in.m[0][3] = _mm_load_ps( m03 );
	in.m[1][0] = _mm_load_ps( m10 );
	in.m[1][1] = _mm_load_ps( m11 );
	in.m[1][2] = _mm_load_ps( m12 );
	in.m[1][3] = _mm_load_ps( m13 );
	in.m[2][0] = _mm_load_ps( m20 );
	in.m[2][1] = _mm_load_ps( m21 );
	in.m[2][2] = _mm_load_ps( m22 );
	in.m[2][3] = _mm_load_ps( m23 );
	in.m[3][0] = _mm_load_ps( m30 );
	in.m[3][1] = _mm_load_ps( m31 );
	in.m[3][2] = _mm_load_ps( m32 );
	in.m[3][3] = _mm_load_ps( m33 );

	determinant_sse( &in, &results );

	float determinantResults[4];
	_mm_store_ps( determinantResults, results );
	TEMPER_EXPECT_TRUE( floateq( determinantResults[0], 285.0f ) );
	TEMPER_EXPECT_TRUE( floateq( determinantResults[1], 285.0f ) );
	TEMPER_EXPECT_TRUE( floateq( determinantResults[2], 285.0f ) );
	TEMPER_EXPECT_TRUE( floateq( determinantResults[3], 285.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestInverse_Scalar_float4x4, void )
{
	float4x4 id;
	identity( id );

	float4x4 mat = float4x4(
		1.000000f, 0.000000f, 0.000000f, 1.000000f,
		0.000000f, 2.000000f, 1.000000f, 2.000000f,
		2.000000f, 1.000000f, 0.000000f, 1.000000f,
		2.000000f, 0.000000f, 1.000000f, 4.000000f
	);
	float4x4 matInverse = inverse( mat );

	TEMPER_EXPECT_TRUE( mat * matInverse == id );

	TEMPER_PASS();
}

TEMPER_TEST( TestInverse_SSE_float4x4, void )
{
	float4x4 id;
	identity( id );

	float m00[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float m01[4] =	{ 0.000000f, 0.000000f, 0.000000f, 0.000000f };
	float m02[4] =	{ 0.000000f, 0.000000f, 0.000000f, 0.000000f };
	float m03[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float m10[4] =	{ 0.000000f, 0.000000f, 0.000000f, 0.000000f };
	float m11[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m12[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float m13[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m20[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m21[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float m22[4] =	{ 0.000000f, 0.000000f, 0.000000f, 0.000000f };
	float m23[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float m30[4] =	{ 2.000000f, 2.000000f, 2.000000f, 2.000000f };
	float m31[4] =	{ 0.000000f, 0.000000f, 0.000000f, 0.000000f };
	float m32[4] =	{ 1.000000f, 1.000000f, 1.000000f, 1.000000f };
	float m33[4] =	{ 4.000000f, 4.000000f, 4.000000f, 4.000000f };

	float4x4_sse_t results;
	float4x4_sse_t inverted;
	float4x4_sse_t in;
	in.m[0][0] = _mm_load_ps( m00 );
	in.m[0][1] = _mm_load_ps( m01 );
	in.m[0][2] = _mm_load_ps( m02 );
	in.m[0][3] = _mm_load_ps( m03 );
	in.m[1][0] = _mm_load_ps( m10 );
	in.m[1][1] = _mm_load_ps( m11 );
	in.m[1][2] = _mm_load_ps( m12 );
	in.m[1][3] = _mm_load_ps( m13 );
	in.m[2][0] = _mm_load_ps( m20 );
	in.m[2][1] = _mm_load_ps( m21 );
	in.m[2][2] = _mm_load_ps( m22 );
	in.m[2][3] = _mm_load_ps( m23 );
	in.m[3][0] = _mm_load_ps( m30 );
	in.m[3][1] = _mm_load_ps( m31 );
	in.m[3][2] = _mm_load_ps( m32 );
	in.m[3][3] = _mm_load_ps( m33 );

	inverse_sse( &in, &inverted );

	mul_sse( &in, &inverted, &results );

	float inverseResults[4];

	_mm_store_ps( inverseResults, results.m[0][0] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[0].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[0].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[0].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[0].x, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[0][1] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[0].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[0].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[0].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[0].y, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[0][2] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[0].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[0].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[0].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[0].z, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[0][3] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[0].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[0].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[0].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[0].w, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[1][0] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[1].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[1].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[1].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[1].x, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[1][1] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[1].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[1].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[1].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[1].y, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[1][2] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[1].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[1].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[1].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[1].z, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[1][3] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[1].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[1].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[1].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[1].w, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[2][0] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[2].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[2].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[2].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[2].x, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[2][1] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[2].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[2].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[2].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[2].y, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[2][2] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[2].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[2].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[2].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[2].z, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[2][3] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[2].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[2].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[2].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[2].w, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[3][0] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[3].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[3].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[3].x, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[3].x, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[3][1] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[3].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[3].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[3].y, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[3].y, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[3][2] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[3].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[3].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[3].z, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[3].z, 0.001000f ) );

	_mm_store_ps( inverseResults, results.m[3][3] );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[0], id.rows[3].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[1], id.rows[3].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[2], id.rows[3].w, 0.001000f ) );
	TEMPER_EXPECT_TRUE( floateq_eps( inverseResults[3], id.rows[3].w, 0.001000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestTranslate_Scalar_float4x4, void )
{
	float4x4 mat;
	identity( mat );

	float3 translation = float3( 2.000000f, 3.000000f, 4.000000f );

	mat = translate( mat, translation );

	TEMPER_EXPECT_TRUE( floateq( mat.rows[0].w, 2.0f ) );
	TEMPER_EXPECT_TRUE( floateq( mat.rows[1].w, 3.0f ) );
	TEMPER_EXPECT_TRUE( floateq( mat.rows[2].w, 4.0f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestTranslate_SSE_float4x4, void )
{
	float translateVecComponents[3][4] =
	{
		{ 2.000000f, 2.000000f, 2.000000f, 2.000000f },	// 4 x components
		{ 3.000000f, 3.000000f, 3.000000f, 3.000000f },	// 4 y components
		{ 4.000000f, 4.000000f, 4.000000f, 4.000000f }	// 4 z components
	};

	float3_sse_t pos;
	memset( &pos, 0, 3 * sizeof( __m128 ) );

	float3_sse_t translation;
	translation.x = _mm_load_ps( translateVecComponents[0] );
	translation.y = _mm_load_ps( translateVecComponents[1] );
	translation.z = _mm_load_ps( translateVecComponents[2] );

	translate_sse( &pos, &translation, &pos );

	float translateResults[4];

	_mm_store_ps( translateResults, pos.x );
	TEMPER_EXPECT_TRUE( floateq( translateResults[0], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[1], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[2], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[3], 2.000000f ) );

	_mm_store_ps( translateResults, pos.y );
	TEMPER_EXPECT_TRUE( floateq( translateResults[0], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[1], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[2], 3.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[3], 3.000000f ) );

	_mm_store_ps( translateResults, pos.z );
	TEMPER_EXPECT_TRUE( floateq( translateResults[0], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[1], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[2], 4.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( translateResults[3], 4.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestRotate_float4x4, void )
{
	float4x4 mat;
	identity( mat );

	float3 rollVec = { 0.000000f, 0.000000f, 1.000000f };
	float4x4 roll = rotate( mat, radiansf( 45.0f ), rollVec );
	float4x4 answerRoll = float4x4(
		0.707107f, -0.707107f, 0.000000f, 0.000000f,
		0.707107f, 0.707107f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);

	float4x4 yaw = rotate( mat, radiansf( 45.0f ), float3( 0.000000f, 1.000000f, 0.000000f ) );
	float4x4 answerYaw = float4x4( 		0.707107f, 0.000000f, 0.707107f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.707107f, 0.000000f, 0.707107f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
 );
	TEMPER_EXPECT_TRUE( yaw == answerYaw );

	float4x4 pitch = rotate( mat, radiansf( 45.0f ), float3( 1.000000f, 0.000000f, 0.000000f ) );
	float4x4 answerPitch = float4x4( 		1.000000f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.707107f, -0.707107f, 0.000000f,
		0.000000f, 0.707107f, 0.707107f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
 );
	TEMPER_EXPECT_TRUE( pitch == answerPitch );
	TEMPER_EXPECT_TRUE( roll == answerRoll );

	TEMPER_PASS();
}

TEMPER_TEST( TestScale_Scalar_float4x4, void )
{
	float3 scaleVec = { 2.000000f, 2.000000f, 2.000000f };
	float4x4 mat;
	identity( mat );

	float4x4 scaled = scale( mat, scaleVec );

	TEMPER_EXPECT_TRUE( floateq( scaled.rows[0].x, 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaled.rows[1].y, 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaled.rows[2].z, 2.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestScale_SSE_float4x4, void )
{
	float scaleVecComponents[3][4] =
	{
		{ 2.000000f, 2.000000f, 2.000000f, 2.000000f },	// 4 x components
		{ 2.000000f, 2.000000f, 2.000000f, 2.000000f },	// 4 y components
		{ 2.000000f, 2.000000f, 2.000000f, 2.000000f }	// 4 z components
	};

	float3_sse_t diagonal;
	diagonal.x = _mm_set1_ps( 1 );
	diagonal.y = _mm_set1_ps( 1 );
	diagonal.z = _mm_set1_ps( 1 );

	float3_sse_t scale;
	scale.x = _mm_load_ps( scaleVecComponents[0] );
	scale.y = _mm_load_ps( scaleVecComponents[1] );
	scale.z = _mm_load_ps( scaleVecComponents[2] );

	scale_sse( &diagonal, &scale, &diagonal );

	float scaleResults[4];
	_mm_store_ps( scaleResults, diagonal.x );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[0], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[1], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[2], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[3], 2.000000f ) );

	_mm_store_ps( scaleResults, diagonal.y );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[0], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[1], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[2], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[3], 2.000000f ) );

	_mm_store_ps( scaleResults, diagonal.z );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[0], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[1], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[2], 2.000000f ) );
	TEMPER_EXPECT_TRUE( floateq( scaleResults[3], 2.000000f ) );

	TEMPER_PASS();
}

TEMPER_TEST( TestOrtho_float4x4, void )
{
	float4x4 answerOrtho_LH_ZO = float4x4(
		0.112500f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.009901f, 0.009901f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);
	float4x4 answerOrtho_LH_NO = float4x4(
		0.112500f, 0.000000f, 0.000000f, -0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 0.019802f, -0.980198f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);
	float4x4 answerOrtho_RH_ZO = float4x4(
		0.112500f, 0.000000f, 0.000000f, -0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.009901f, 0.009901f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);
	float4x4 answerOrtho_RH_NO = float4x4(
		0.112500f, 0.000000f, 0.000000f, -0.000000f,
		0.000000f, -0.200000f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -0.019802f, -0.980198f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);

	float width     = 1280.0f;
	float height    = 720.0f;
	float aspect    = width / height;
	float orthoSize = 5.0f;

	float left   = -aspect * orthoSize;
	float right  =  aspect * orthoSize;
	float top    = -orthoSize;
	float bottom =  orthoSize;

	float4x4 mat_LH_ZO = ortho_lh_zo( left, right, top, bottom, -1.0f, 100.0f );
	float4x4 mat_LH_NO = ortho_lh_no( left, right, top, bottom, -1.0f, 100.0f );
	float4x4 mat_RH_ZO = ortho_rh_zo( left, right, top, bottom, -1.0f, 100.0f );
	float4x4 mat_RH_NO = ortho_rh_no( left, right, top, bottom, -1.0f, 100.0f );

	TEMPER_EXPECT_TRUE( mat_LH_ZO == answerOrtho_LH_ZO );
	TEMPER_EXPECT_TRUE( mat_LH_NO == answerOrtho_LH_NO );
	TEMPER_EXPECT_TRUE( mat_RH_ZO == answerOrtho_RH_ZO );
	TEMPER_EXPECT_TRUE( mat_RH_NO == answerOrtho_RH_NO );

	TEMPER_PASS();
}

TEMPER_TEST( TestPerspective_float4x4, void )
{
	float4x4 answerPerspective_LH_ZO = float4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.001001f, -0.100100f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f
	);
	float4x4 answerPerspective_LH_NO = float4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, 1.002002f, -0.200200f,
		0.000000f, 0.000000f, 1.000000f, 0.000000f
	);
	float4x4 answerPerspective_RH_ZO = float4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.001001f, -0.100100f,
		0.000000f, 0.000000f, -1.000000f, 0.000000f
	);
	float4x4 answerPerspective_RH_NO = float4x4(
		0.347270f, 0.000000f, 0.000000f, 0.000000f,
		0.000000f, 0.617370f, 0.000000f, 0.000000f,
		0.000000f, 0.000000f, -1.002002f, -0.200200f,
		0.000000f, 0.000000f, -1.000000f, 0.000000f
	);

	float aspect = 1280.0f / 720.0f;

	float4x4 mat_LH_ZO = perspective_lh_zo( 90.0f, aspect, 0.1f, 100.0f );
	float4x4 mat_LH_NO = perspective_lh_no( 90.0f, aspect, 0.1f, 100.0f );
	float4x4 mat_RH_ZO = perspective_rh_zo( 90.0f, aspect, 0.1f, 100.0f );
	float4x4 mat_RH_NO = perspective_rh_no( 90.0f, aspect, 0.1f, 100.0f );

	TEMPER_EXPECT_TRUE( mat_LH_ZO == answerPerspective_LH_ZO );
	TEMPER_EXPECT_TRUE( mat_LH_NO == answerPerspective_LH_NO );
	TEMPER_EXPECT_TRUE( mat_RH_ZO == answerPerspective_RH_ZO );
	TEMPER_EXPECT_TRUE( mat_RH_NO == answerPerspective_RH_NO );

	TEMPER_PASS();
}

TEMPER_TEST( TestLookAt_float4x4, void )
{
	float4x4 answerLookAt_LH = float4x4(
		0.707107f, 0.000000f, -0.707107f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		0.707107f, 0.000000f, 0.707107f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);
	float4x4 answerLookAt_RH = float4x4(
		-0.707107f, 0.000000f, 0.707107f, 0.000000f,
		0.000000f, 1.000000f, 0.000000f, 0.000000f,
		-0.707107f, 0.000000f, -0.707107f, 0.000000f,
		0.000000f, 0.000000f, 0.000000f, 1.000000f
	);

	float3 currentPos = { 0.000000f, 0.000000f, 0.000000f };
	float3 targetPos = { 1.000000f, 0.000000f, 1.000000f };
	float3 up = { 0.000000f, 1.000000f, 0.000000f };

	float4x4 mat_LH = lookat_lh( currentPos, targetPos, up );
	float4x4 mat_RH = lookat_rh( currentPos, targetPos, up );

	TEMPER_EXPECT_TRUE( mat_LH == answerLookAt_LH );
	TEMPER_EXPECT_TRUE( mat_RH == answerLookAt_RH );

	TEMPER_PASS();
}

TEMPER_SUITE( Test_float4x4 )
{
	TEMPER_RUN_TEST( TestAssignment_float4x4 );
	TEMPER_RUN_TEST( TestCtor_float4x4 );
	TEMPER_RUN_TEST( TestArray_float4x4 );
	TEMPER_RUN_TEST( TestIncrement_float4x4 );
	TEMPER_RUN_TEST( TestDecrement_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Addition_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Subtraction_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Multiplication_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_Scalar_Division_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_SSE_Addition_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_SSE_Subtraction_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_SSE_Multiplication_float4x4 );
	TEMPER_RUN_TEST( TestComponentWiseArithmetic_SSE_Division_float4x4 );
	TEMPER_RUN_TEST( TestMultiplyMatrix_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestMultiplyMatrix_SSE_float4x4 );
	TEMPER_RUN_TEST( TestMultiplyVector_float4x4 );
	TEMPER_RUN_TEST( TestDivideMatrix_float4x4 );
	TEMPER_RUN_TEST( TestRelational_float4x4 );
	TEMPER_RUN_TEST( TestIdentity_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestIdentity_SSE_float4x4 );
	TEMPER_RUN_TEST( TestTranspose_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestTranspose_SSE_float4x4 );
	TEMPER_RUN_TEST( TestDeterminant_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestDeterminant_SSE_float4x4 );
	TEMPER_RUN_TEST( TestInverse_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestInverse_SSE_float4x4 );
	TEMPER_RUN_TEST( TestTranslate_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestTranslate_SSE_float4x4 );
	TEMPER_RUN_TEST( TestRotate_float4x4 );
	TEMPER_RUN_TEST( TestScale_Scalar_float4x4 );
	TEMPER_RUN_TEST( TestScale_SSE_float4x4 );
	TEMPER_RUN_TEST( TestOrtho_float4x4 );
	TEMPER_RUN_TEST( TestPerspective_float4x4 );
	TEMPER_RUN_TEST( TestLookAt_float4x4 );
}
