/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include <stdint.h>
#include "../hlml_types.h"

#include "bool2.h"
#include "bool3.h"
struct float3;

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

/// \brief A vector of 4 bool32_ts with components xyzw.
/// Components are also stored as elements in an array via a union.
struct bool4
{
	union
	{
		struct
		{
			bool32_t x;
			bool32_t y;
			bool32_t z;
			bool32_t w;
		};

		bool32_t data[4];
	};


	/// Default constructor.  Initializes all values to zero.
	inline bool4() {}

	/// Initializes all components of the vector to the given scalar value.
	inline explicit bool4( const bool32_t x );

	/// Sets the xyzw members of the vector to the corresponding parameters.
	inline bool4( const bool32_t x, const bool32_t y, const bool32_t z, const bool32_t w );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline bool4( const bool2& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline bool4( const bool3& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline bool4( const bool4& other );

	~bool4() {}

	/// Copies the elements of the given vector via a single memcpy.
	inline bool4 operator=( const bool2& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline bool4 operator=( const bool3& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline bool4 operator=( const bool4& rhs );

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 3.
	inline const bool32_t& operator[]( const uint32_t index ) const;

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 3.
	inline bool32_t& operator[]( const uint32_t index );

	// swizzle funcs
	inline bool2 xx() const;
	inline bool2 yx() const;
	inline bool2 xy() const;
	inline bool2 yy() const;
	inline bool3 xxx() const;
	inline bool3 yxx() const;
	inline bool3 zxx() const;
	inline bool3 xyx() const;
	inline bool3 yyx() const;
	inline bool3 zyx() const;
	inline bool3 xzx() const;
	inline bool3 yzx() const;
	inline bool3 zzx() const;
	inline bool3 xxy() const;
	inline bool3 yxy() const;
	inline bool3 zxy() const;
	inline bool3 xyy() const;
	inline bool3 yyy() const;
	inline bool3 zyy() const;
	inline bool3 xzy() const;
	inline bool3 yzy() const;
	inline bool3 zzy() const;
	inline bool3 xxz() const;
	inline bool3 yxz() const;
	inline bool3 zxz() const;
	inline bool3 xyz() const;
	inline bool3 yyz() const;
	inline bool3 zyz() const;
	inline bool3 xzz() const;
	inline bool3 yzz() const;
	inline bool3 zzz() const;
	inline bool4 xxxx() const;
	inline bool4 yxxx() const;
	inline bool4 zxxx() const;
	inline bool4 wxxx() const;
	inline bool4 xyxx() const;
	inline bool4 yyxx() const;
	inline bool4 zyxx() const;
	inline bool4 wyxx() const;
	inline bool4 xzxx() const;
	inline bool4 yzxx() const;
	inline bool4 zzxx() const;
	inline bool4 wzxx() const;
	inline bool4 xwxx() const;
	inline bool4 ywxx() const;
	inline bool4 zwxx() const;
	inline bool4 wwxx() const;
	inline bool4 xxyx() const;
	inline bool4 yxyx() const;
	inline bool4 zxyx() const;
	inline bool4 wxyx() const;
	inline bool4 xyyx() const;
	inline bool4 yyyx() const;
	inline bool4 zyyx() const;
	inline bool4 wyyx() const;
	inline bool4 xzyx() const;
	inline bool4 yzyx() const;
	inline bool4 zzyx() const;
	inline bool4 wzyx() const;
	inline bool4 xwyx() const;
	inline bool4 ywyx() const;
	inline bool4 zwyx() const;
	inline bool4 wwyx() const;
	inline bool4 xxzx() const;
	inline bool4 yxzx() const;
	inline bool4 zxzx() const;
	inline bool4 wxzx() const;
	inline bool4 xyzx() const;
	inline bool4 yyzx() const;
	inline bool4 zyzx() const;
	inline bool4 wyzx() const;
	inline bool4 xzzx() const;
	inline bool4 yzzx() const;
	inline bool4 zzzx() const;
	inline bool4 wzzx() const;
	inline bool4 xwzx() const;
	inline bool4 ywzx() const;
	inline bool4 zwzx() const;
	inline bool4 wwzx() const;
	inline bool4 xxwx() const;
	inline bool4 yxwx() const;
	inline bool4 zxwx() const;
	inline bool4 wxwx() const;
	inline bool4 xywx() const;
	inline bool4 yywx() const;
	inline bool4 zywx() const;
	inline bool4 wywx() const;
	inline bool4 xzwx() const;
	inline bool4 yzwx() const;
	inline bool4 zzwx() const;
	inline bool4 wzwx() const;
	inline bool4 xwwx() const;
	inline bool4 ywwx() const;
	inline bool4 zwwx() const;
	inline bool4 wwwx() const;
	inline bool4 xxxy() const;
	inline bool4 yxxy() const;
	inline bool4 zxxy() const;
	inline bool4 wxxy() const;
	inline bool4 xyxy() const;
	inline bool4 yyxy() const;
	inline bool4 zyxy() const;
	inline bool4 wyxy() const;
	inline bool4 xzxy() const;
	inline bool4 yzxy() const;
	inline bool4 zzxy() const;
	inline bool4 wzxy() const;
	inline bool4 xwxy() const;
	inline bool4 ywxy() const;
	inline bool4 zwxy() const;
	inline bool4 wwxy() const;
	inline bool4 xxyy() const;
	inline bool4 yxyy() const;
	inline bool4 zxyy() const;
	inline bool4 wxyy() const;
	inline bool4 xyyy() const;
	inline bool4 yyyy() const;
	inline bool4 zyyy() const;
	inline bool4 wyyy() const;
	inline bool4 xzyy() const;
	inline bool4 yzyy() const;
	inline bool4 zzyy() const;
	inline bool4 wzyy() const;
	inline bool4 xwyy() const;
	inline bool4 ywyy() const;
	inline bool4 zwyy() const;
	inline bool4 wwyy() const;
	inline bool4 xxzy() const;
	inline bool4 yxzy() const;
	inline bool4 zxzy() const;
	inline bool4 wxzy() const;
	inline bool4 xyzy() const;
	inline bool4 yyzy() const;
	inline bool4 zyzy() const;
	inline bool4 wyzy() const;
	inline bool4 xzzy() const;
	inline bool4 yzzy() const;
	inline bool4 zzzy() const;
	inline bool4 wzzy() const;
	inline bool4 xwzy() const;
	inline bool4 ywzy() const;
	inline bool4 zwzy() const;
	inline bool4 wwzy() const;
	inline bool4 xxwy() const;
	inline bool4 yxwy() const;
	inline bool4 zxwy() const;
	inline bool4 wxwy() const;
	inline bool4 xywy() const;
	inline bool4 yywy() const;
	inline bool4 zywy() const;
	inline bool4 wywy() const;
	inline bool4 xzwy() const;
	inline bool4 yzwy() const;
	inline bool4 zzwy() const;
	inline bool4 wzwy() const;
	inline bool4 xwwy() const;
	inline bool4 ywwy() const;
	inline bool4 zwwy() const;
	inline bool4 wwwy() const;
	inline bool4 xxxz() const;
	inline bool4 yxxz() const;
	inline bool4 zxxz() const;
	inline bool4 wxxz() const;
	inline bool4 xyxz() const;
	inline bool4 yyxz() const;
	inline bool4 zyxz() const;
	inline bool4 wyxz() const;
	inline bool4 xzxz() const;
	inline bool4 yzxz() const;
	inline bool4 zzxz() const;
	inline bool4 wzxz() const;
	inline bool4 xwxz() const;
	inline bool4 ywxz() const;
	inline bool4 zwxz() const;
	inline bool4 wwxz() const;
	inline bool4 xxyz() const;
	inline bool4 yxyz() const;
	inline bool4 zxyz() const;
	inline bool4 wxyz() const;
	inline bool4 xyyz() const;
	inline bool4 yyyz() const;
	inline bool4 zyyz() const;
	inline bool4 wyyz() const;
	inline bool4 xzyz() const;
	inline bool4 yzyz() const;
	inline bool4 zzyz() const;
	inline bool4 wzyz() const;
	inline bool4 xwyz() const;
	inline bool4 ywyz() const;
	inline bool4 zwyz() const;
	inline bool4 wwyz() const;
	inline bool4 xxzz() const;
	inline bool4 yxzz() const;
	inline bool4 zxzz() const;
	inline bool4 wxzz() const;
	inline bool4 xyzz() const;
	inline bool4 yyzz() const;
	inline bool4 zyzz() const;
	inline bool4 wyzz() const;
	inline bool4 xzzz() const;
	inline bool4 yzzz() const;
	inline bool4 zzzz() const;
	inline bool4 wzzz() const;
	inline bool4 xwzz() const;
	inline bool4 ywzz() const;
	inline bool4 zwzz() const;
	inline bool4 wwzz() const;
	inline bool4 xxwz() const;
	inline bool4 yxwz() const;
	inline bool4 zxwz() const;
	inline bool4 wxwz() const;
	inline bool4 xywz() const;
	inline bool4 yywz() const;
	inline bool4 zywz() const;
	inline bool4 wywz() const;
	inline bool4 xzwz() const;
	inline bool4 yzwz() const;
	inline bool4 zzwz() const;
	inline bool4 wzwz() const;
	inline bool4 xwwz() const;
	inline bool4 ywwz() const;
	inline bool4 zwwz() const;
	inline bool4 wwwz() const;
	inline bool4 xxxw() const;
	inline bool4 yxxw() const;
	inline bool4 zxxw() const;
	inline bool4 wxxw() const;
	inline bool4 xyxw() const;
	inline bool4 yyxw() const;
	inline bool4 zyxw() const;
	inline bool4 wyxw() const;
	inline bool4 xzxw() const;
	inline bool4 yzxw() const;
	inline bool4 zzxw() const;
	inline bool4 wzxw() const;
	inline bool4 xwxw() const;
	inline bool4 ywxw() const;
	inline bool4 zwxw() const;
	inline bool4 wwxw() const;
	inline bool4 xxyw() const;
	inline bool4 yxyw() const;
	inline bool4 zxyw() const;
	inline bool4 wxyw() const;
	inline bool4 xyyw() const;
	inline bool4 yyyw() const;
	inline bool4 zyyw() const;
	inline bool4 wyyw() const;
	inline bool4 xzyw() const;
	inline bool4 yzyw() const;
	inline bool4 zzyw() const;
	inline bool4 wzyw() const;
	inline bool4 xwyw() const;
	inline bool4 ywyw() const;
	inline bool4 zwyw() const;
	inline bool4 wwyw() const;
	inline bool4 xxzw() const;
	inline bool4 yxzw() const;
	inline bool4 zxzw() const;
	inline bool4 wxzw() const;
	inline bool4 xyzw() const;
	inline bool4 yyzw() const;
	inline bool4 zyzw() const;
	inline bool4 wyzw() const;
	inline bool4 xzzw() const;
	inline bool4 yzzw() const;
	inline bool4 zzzw() const;
	inline bool4 wzzw() const;
	inline bool4 xwzw() const;
	inline bool4 ywzw() const;
	inline bool4 zwzw() const;
	inline bool4 wwzw() const;
	inline bool4 xxww() const;
	inline bool4 yxww() const;
	inline bool4 zxww() const;
	inline bool4 wxww() const;
	inline bool4 xyww() const;
	inline bool4 yyww() const;
	inline bool4 zyww() const;
	inline bool4 wyww() const;
	inline bool4 xzww() const;
	inline bool4 yzww() const;
	inline bool4 zzww() const;
	inline bool4 wzww() const;
	inline bool4 xwww() const;
	inline bool4 ywww() const;
	inline bool4 zwww() const;
	inline bool4 wwww() const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

