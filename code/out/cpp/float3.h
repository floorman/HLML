/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool3.h"

#include <stdint.h>
#include "../hlml_types.h"

#include "float2.h"
struct float4;
struct float3;

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

/// \brief A vector of 3 floats with components xyz.
/// Components are also stored as elements in an array via a union.
struct float3
{
	union
	{
		struct
		{
			float x;
			float y;
			float z;
		};

		struct
		{
			float r;
			float g;
			float b;
		};

		float data[3];
	};


	/// Default constructor.  Initializes all values to zero.
	inline float3() {}

	/// Initializes all components of the vector to the given scalar value.
	inline explicit float3( const float x );

	/// Sets the xyz members of the vector to the corresponding parameters.
	inline float3( const float x, const float y, const float z );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline float3( const float2& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline float3( const float3& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline float3( const float4& other );

	~float3() {}

	/// Copies the elements of the given vector via a single memcpy.
	inline float3 operator=( const float2& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline float3 operator=( const float3& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline float3 operator=( const float4& rhs );

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline const float& operator[]( const uint32_t index ) const;

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline float& operator[]( const uint32_t index );

	// swizzle funcs
	inline float2 xx() const;
	inline float2 yx() const;
	inline float2 xy() const;
	inline float2 yy() const;
	inline float3 xxx() const;
	inline float3 yxx() const;
	inline float3 zxx() const;
	inline float3 xyx() const;
	inline float3 yyx() const;
	inline float3 zyx() const;
	inline float3 xzx() const;
	inline float3 yzx() const;
	inline float3 zzx() const;
	inline float3 xxy() const;
	inline float3 yxy() const;
	inline float3 zxy() const;
	inline float3 xyy() const;
	inline float3 yyy() const;
	inline float3 zyy() const;
	inline float3 xzy() const;
	inline float3 yzy() const;
	inline float3 zzy() const;
	inline float3 xxz() const;
	inline float3 yxz() const;
	inline float3 zxz() const;
	inline float3 xyz() const;
	inline float3 yyz() const;
	inline float3 zyz() const;
	inline float3 xzz() const;
	inline float3 yzz() const;
	inline float3 zzz() const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

