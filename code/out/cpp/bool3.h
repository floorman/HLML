/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include <stdint.h>
#include "../hlml_types.h"

#include "bool2.h"
struct bool4;
struct float3;

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

/// \brief A vector of 3 bool32_ts with components xyz.
/// Components are also stored as elements in an array via a union.
struct bool3
{
	union
	{
		struct
		{
			bool32_t x;
			bool32_t y;
			bool32_t z;
		};

		bool32_t data[3];
	};


	/// Default constructor.  Initializes all values to zero.
	inline bool3() {}

	/// Initializes all components of the vector to the given scalar value.
	inline explicit bool3( const bool32_t x );

	/// Sets the xyz members of the vector to the corresponding parameters.
	inline bool3( const bool32_t x, const bool32_t y, const bool32_t z );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline bool3( const bool2& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline bool3( const bool3& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline bool3( const bool4& other );

	~bool3() {}

	/// Copies the elements of the given vector via a single memcpy.
	inline bool3 operator=( const bool2& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline bool3 operator=( const bool3& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline bool3 operator=( const bool4& rhs );

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline const bool32_t& operator[]( const uint32_t index ) const;

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline bool32_t& operator[]( const uint32_t index );

	// swizzle funcs
	inline bool2 xx() const;
	inline bool2 yx() const;
	inline bool2 xy() const;
	inline bool2 yy() const;
	inline bool3 xxx() const;
	inline bool3 yxx() const;
	inline bool3 zxx() const;
	inline bool3 xyx() const;
	inline bool3 yyx() const;
	inline bool3 zyx() const;
	inline bool3 xzx() const;
	inline bool3 yzx() const;
	inline bool3 zzx() const;
	inline bool3 xxy() const;
	inline bool3 yxy() const;
	inline bool3 zxy() const;
	inline bool3 xyy() const;
	inline bool3 yyy() const;
	inline bool3 zyy() const;
	inline bool3 xzy() const;
	inline bool3 yzy() const;
	inline bool3 zzy() const;
	inline bool3 xxz() const;
	inline bool3 yxz() const;
	inline bool3 zxz() const;
	inline bool3 xyz() const;
	inline bool3 yyz() const;
	inline bool3 zyz() const;
	inline bool3 xzz() const;
	inline bool3 yzz() const;
	inline bool3 zzz() const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

