/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool3.h"

#include <stdint.h>
#include "../hlml_types.h"

#include "double2.h"
struct double4;
struct float3;

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

/// \brief A vector of 3 doubles with components xyz.
/// Components are also stored as elements in an array via a union.
struct double3
{
	union
	{
		struct
		{
			double x;
			double y;
			double z;
		};

		struct
		{
			double r;
			double g;
			double b;
		};

		double data[3];
	};


	/// Default constructor.  Initializes all values to zero.
	inline double3() {}

	/// Initializes all components of the vector to the given scalar value.
	inline explicit double3( const double x );

	/// Sets the xyz members of the vector to the corresponding parameters.
	inline double3( const double x, const double y, const double z );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline double3( const double2& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline double3( const double3& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline double3( const double4& other );

	~double3() {}

	/// Copies the elements of the given vector via a single memcpy.
	inline double3 operator=( const double2& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline double3 operator=( const double3& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline double3 operator=( const double4& rhs );

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline const double& operator[]( const uint32_t index ) const;

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline double& operator[]( const uint32_t index );

	// swizzle funcs
	inline double2 xx() const;
	inline double2 yx() const;
	inline double2 xy() const;
	inline double2 yy() const;
	inline double3 xxx() const;
	inline double3 yxx() const;
	inline double3 zxx() const;
	inline double3 xyx() const;
	inline double3 yyx() const;
	inline double3 zyx() const;
	inline double3 xzx() const;
	inline double3 yzx() const;
	inline double3 zzx() const;
	inline double3 xxy() const;
	inline double3 yxy() const;
	inline double3 zxy() const;
	inline double3 xyy() const;
	inline double3 yyy() const;
	inline double3 zyy() const;
	inline double3 xzy() const;
	inline double3 yzy() const;
	inline double3 zzy() const;
	inline double3 xxz() const;
	inline double3 yxz() const;
	inline double3 zxz() const;
	inline double3 xyz() const;
	inline double3 yyz() const;
	inline double3 zyz() const;
	inline double3 xzz() const;
	inline double3 yzz() const;
	inline double3 zzz() const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

