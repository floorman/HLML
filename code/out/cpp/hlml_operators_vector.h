/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool2.h"
#include "bool3.h"
#include "bool4.h"

#include "int2.h"
#include "int3.h"
#include "int4.h"

#include "uint2.h"
#include "uint3.h"
#include "uint4.h"

#include "float2.h"
#include "float3.h"
#include "float4.h"

#include "double2.h"
#include "double3.h"
#include "double4.h"

#include "hlml_functions_vector.h"

// bool2
inline bool operator==( const bool2& lhs, const bool2& rhs );

inline bool operator!=( const bool2& lhs, const bool2& rhs );

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise added by the corresponding component of the right-hand bool2.
inline bool2 operator+( const bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Adds each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator+=( bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise subtracted by the corresponding component of the right-hand bool2.
inline bool2 operator-( const bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Subtracts each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator-=( bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise multiplied by the corresponding component of the right-hand bool2.
inline bool2 operator*( const bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Multiplies each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator*=( bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Returns a copy of the bool2 that has been component-wise divided by the corresponding component of the right-hand bool2.
inline bool2 operator/( const bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Divides each component of the bool2 by the corresponding component of the right-hand bool2.
inline bool2 operator/=( bool2& lhs, const bool32_t scalar );

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( bool2& lhs, const bool2& rhs );

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( bool2& lhs, const bool2& rhs );

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( bool2& lhs, const bool2& rhs );

/// \relates bool2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( bool2& lhs, const bool2& rhs );


// bool3
inline bool operator==( const bool3& lhs, const bool3& rhs );

inline bool operator!=( const bool3& lhs, const bool3& rhs );

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise added by the corresponding component of the right-hand bool3.
inline bool3 operator+( const bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Adds each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator+=( bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise subtracted by the corresponding component of the right-hand bool3.
inline bool3 operator-( const bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Subtracts each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator-=( bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise multiplied by the corresponding component of the right-hand bool3.
inline bool3 operator*( const bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Multiplies each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator*=( bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Returns a copy of the bool3 that has been component-wise divided by the corresponding component of the right-hand bool3.
inline bool3 operator/( const bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Divides each component of the bool3 by the corresponding component of the right-hand bool3.
inline bool3 operator/=( bool3& lhs, const bool32_t scalar );

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( bool3& lhs, const bool3& rhs );

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( bool3& lhs, const bool3& rhs );

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( bool3& lhs, const bool3& rhs );

/// \relates bool3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( bool3& lhs, const bool3& rhs );


// bool4
inline bool operator==( const bool4& lhs, const bool4& rhs );

inline bool operator!=( const bool4& lhs, const bool4& rhs );

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise added by the corresponding component of the right-hand bool4.
inline bool4 operator+( const bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Adds each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator+=( bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise subtracted by the corresponding component of the right-hand bool4.
inline bool4 operator-( const bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Subtracts each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator-=( bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise multiplied by the corresponding component of the right-hand bool4.
inline bool4 operator*( const bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Multiplies each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator*=( bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Returns a copy of the bool4 that has been component-wise divided by the corresponding component of the right-hand bool4.
inline bool4 operator/( const bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Divides each component of the bool4 by the corresponding component of the right-hand bool4.
inline bool4 operator/=( bool4& lhs, const bool32_t scalar );

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( bool4& lhs, const bool4& rhs );

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( bool4& lhs, const bool4& rhs );

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( bool4& lhs, const bool4& rhs );

/// \relates bool4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( bool4& lhs, const bool4& rhs );


// int2
inline bool operator==( const int2& lhs, const int2& rhs );

inline bool operator!=( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise added by the corresponding component of the right-hand int2.
inline int2 operator+( const int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Adds each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator+=( int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise added by the corresponding component of the right-hand int2.
inline int2 operator+( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Adds each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator+=( int2&& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise subtracted by the corresponding component of the right-hand int2.
inline int2 operator-( const int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Subtracts each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator-=( int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise subtracted by the corresponding component of the right-hand int2.
inline int2 operator-( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Subtracts each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator-=( int2&& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise multiplied by the corresponding component of the right-hand int2.
inline int2 operator*( const int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Multiplies each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator*=( int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise multiplied by the corresponding component of the right-hand int2.
inline int2 operator*( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Multiplies each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator*=( int2&& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise divided by the corresponding component of the right-hand int2.
inline int2 operator/( const int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Divides each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator/=( int2& lhs, const int32_t scalar );

/// \relates int2
/// \brief Returns a copy of the int2 that has been component-wise divided by the corresponding component of the right-hand int2.
inline int2 operator/( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Divides each component of the int2 by the corresponding component of the right-hand int2.
inline int2 operator/=( int2&& lhs, const int2& rhs );

// prefix
/// \relates int2
/// \brief Prefix increment operator.  Adds one to each component of the given int2 before evaluation.
inline int2& operator++( int2& lhs );

// postfix
/// \relates int2
/// \brief Postfix increment operator.  Adds one to each component of the given int2 after evaluation.
inline int2& operator++( int2& lhs, const int );
// prefix
/// \relates int2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given int2 before evaluation.
inline int2& operator--( int2& lhs );

// postfix
/// \relates int2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given int2 after evaluation.
inline int2& operator--( int2& lhs, const int );
/// \relates int2
/// \brief Returns a copy of the int2 where each component of the left-hand int2 has been bitwise AND'd against the corresponding component of the right-hand side int2.
inline int2 operator&( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Performs a bitwise AND on the given left-hand int2 against the corresponding component of the given right-hand int2.
inline int2 operator&=( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 where each component of the left-hand int2 has been bitwise OR'd against the corresponding component of the right-hand side int2.
inline int2 operator|( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Performs a bitwise OR on the given left-hand int2 against the corresponding component of the given right-hand int2.
inline int2 operator|=( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 where each component of the left-hand int2 has been bitwise XOR'd against the corresponding component of the right-hand side int2.
inline int2 operator^( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Performs a bitwise XOR on the given left-hand int2 against the corresponding component of the given right-hand int2.
inline int2 operator^=( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 where each component of the left-hand int2 has been bitwise left-shifted by the corresponding component of the right-hand side int2.
inline int2 operator<<( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Performs a left bitshift on the given left-hand int2 by the corresponding component of the given right-hand int2.
inline int2 operator<<=( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a copy of the int2 where each component of the left-hand int2 has been bitwise right-shifted by the corresponding component of the right-hand side int2.
inline int2 operator>>( const int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Performs a right bitshift on the given left-hand int2 by the corresponding component of the given right-hand int2.
inline int2 operator>>=( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Performs a unary bitwise operation on all components of the given int2.
inline int2 operator~( const int2& lhs );

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( int2& lhs, const int2& rhs );

/// \relates int2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( int2& lhs, const int2& rhs );


// int3
inline bool operator==( const int3& lhs, const int3& rhs );

inline bool operator!=( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise added by the corresponding component of the right-hand int3.
inline int3 operator+( const int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Adds each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator+=( int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise added by the corresponding component of the right-hand int3.
inline int3 operator+( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Adds each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator+=( int3&& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise subtracted by the corresponding component of the right-hand int3.
inline int3 operator-( const int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Subtracts each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator-=( int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise subtracted by the corresponding component of the right-hand int3.
inline int3 operator-( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Subtracts each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator-=( int3&& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise multiplied by the corresponding component of the right-hand int3.
inline int3 operator*( const int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Multiplies each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator*=( int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise multiplied by the corresponding component of the right-hand int3.
inline int3 operator*( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Multiplies each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator*=( int3&& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise divided by the corresponding component of the right-hand int3.
inline int3 operator/( const int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Divides each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator/=( int3& lhs, const int32_t scalar );

/// \relates int3
/// \brief Returns a copy of the int3 that has been component-wise divided by the corresponding component of the right-hand int3.
inline int3 operator/( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Divides each component of the int3 by the corresponding component of the right-hand int3.
inline int3 operator/=( int3&& lhs, const int3& rhs );

// prefix
/// \relates int3
/// \brief Prefix increment operator.  Adds one to each component of the given int3 before evaluation.
inline int3& operator++( int3& lhs );

// postfix
/// \relates int3
/// \brief Postfix increment operator.  Adds one to each component of the given int3 after evaluation.
inline int3& operator++( int3& lhs, const int );
// prefix
/// \relates int3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given int3 before evaluation.
inline int3& operator--( int3& lhs );

// postfix
/// \relates int3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given int3 after evaluation.
inline int3& operator--( int3& lhs, const int );
/// \relates int3
/// \brief Returns a copy of the int3 where each component of the left-hand int3 has been bitwise AND'd against the corresponding component of the right-hand side int3.
inline int3 operator&( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Performs a bitwise AND on the given left-hand int3 against the corresponding component of the given right-hand int3.
inline int3 operator&=( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 where each component of the left-hand int3 has been bitwise OR'd against the corresponding component of the right-hand side int3.
inline int3 operator|( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Performs a bitwise OR on the given left-hand int3 against the corresponding component of the given right-hand int3.
inline int3 operator|=( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 where each component of the left-hand int3 has been bitwise XOR'd against the corresponding component of the right-hand side int3.
inline int3 operator^( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Performs a bitwise XOR on the given left-hand int3 against the corresponding component of the given right-hand int3.
inline int3 operator^=( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 where each component of the left-hand int3 has been bitwise left-shifted by the corresponding component of the right-hand side int3.
inline int3 operator<<( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Performs a left bitshift on the given left-hand int3 by the corresponding component of the given right-hand int3.
inline int3 operator<<=( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a copy of the int3 where each component of the left-hand int3 has been bitwise right-shifted by the corresponding component of the right-hand side int3.
inline int3 operator>>( const int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Performs a right bitshift on the given left-hand int3 by the corresponding component of the given right-hand int3.
inline int3 operator>>=( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Performs a unary bitwise operation on all components of the given int3.
inline int3 operator~( const int3& lhs );

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( int3& lhs, const int3& rhs );

/// \relates int3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( int3& lhs, const int3& rhs );


// int4
inline bool operator==( const int4& lhs, const int4& rhs );

inline bool operator!=( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise added by the corresponding component of the right-hand int4.
inline int4 operator+( const int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Adds each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator+=( int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise added by the corresponding component of the right-hand int4.
inline int4 operator+( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Adds each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator+=( int4&& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise subtracted by the corresponding component of the right-hand int4.
inline int4 operator-( const int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Subtracts each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator-=( int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise subtracted by the corresponding component of the right-hand int4.
inline int4 operator-( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Subtracts each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator-=( int4&& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise multiplied by the corresponding component of the right-hand int4.
inline int4 operator*( const int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Multiplies each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator*=( int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise multiplied by the corresponding component of the right-hand int4.
inline int4 operator*( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Multiplies each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator*=( int4&& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise divided by the corresponding component of the right-hand int4.
inline int4 operator/( const int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Divides each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator/=( int4& lhs, const int32_t scalar );

/// \relates int4
/// \brief Returns a copy of the int4 that has been component-wise divided by the corresponding component of the right-hand int4.
inline int4 operator/( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Divides each component of the int4 by the corresponding component of the right-hand int4.
inline int4 operator/=( int4&& lhs, const int4& rhs );

// prefix
/// \relates int4
/// \brief Prefix increment operator.  Adds one to each component of the given int4 before evaluation.
inline int4& operator++( int4& lhs );

// postfix
/// \relates int4
/// \brief Postfix increment operator.  Adds one to each component of the given int4 after evaluation.
inline int4& operator++( int4& lhs, const int );
// prefix
/// \relates int4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given int4 before evaluation.
inline int4& operator--( int4& lhs );

// postfix
/// \relates int4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given int4 after evaluation.
inline int4& operator--( int4& lhs, const int );
/// \relates int4
/// \brief Returns a copy of the int4 where each component of the left-hand int4 has been bitwise AND'd against the corresponding component of the right-hand side int4.
inline int4 operator&( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Performs a bitwise AND on the given left-hand int4 against the corresponding component of the given right-hand int4.
inline int4 operator&=( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 where each component of the left-hand int4 has been bitwise OR'd against the corresponding component of the right-hand side int4.
inline int4 operator|( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Performs a bitwise OR on the given left-hand int4 against the corresponding component of the given right-hand int4.
inline int4 operator|=( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 where each component of the left-hand int4 has been bitwise XOR'd against the corresponding component of the right-hand side int4.
inline int4 operator^( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Performs a bitwise XOR on the given left-hand int4 against the corresponding component of the given right-hand int4.
inline int4 operator^=( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 where each component of the left-hand int4 has been bitwise left-shifted by the corresponding component of the right-hand side int4.
inline int4 operator<<( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Performs a left bitshift on the given left-hand int4 by the corresponding component of the given right-hand int4.
inline int4 operator<<=( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a copy of the int4 where each component of the left-hand int4 has been bitwise right-shifted by the corresponding component of the right-hand side int4.
inline int4 operator>>( const int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Performs a right bitshift on the given left-hand int4 by the corresponding component of the given right-hand int4.
inline int4 operator>>=( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Performs a unary bitwise operation on all components of the given int4.
inline int4 operator~( const int4& lhs );

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( int4& lhs, const int4& rhs );

/// \relates int4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( int4& lhs, const int4& rhs );


// uint2
inline bool operator==( const uint2& lhs, const uint2& rhs );

inline bool operator!=( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise added by the corresponding component of the right-hand uint2.
inline uint2 operator+( const uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Adds each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator+=( uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise added by the corresponding component of the right-hand uint2.
inline uint2 operator+( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Adds each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator+=( uint2&& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise subtracted by the corresponding component of the right-hand uint2.
inline uint2 operator-( const uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Subtracts each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator-=( uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise subtracted by the corresponding component of the right-hand uint2.
inline uint2 operator-( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Subtracts each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator-=( uint2&& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise multiplied by the corresponding component of the right-hand uint2.
inline uint2 operator*( const uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Multiplies each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator*=( uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise multiplied by the corresponding component of the right-hand uint2.
inline uint2 operator*( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Multiplies each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator*=( uint2&& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise divided by the corresponding component of the right-hand uint2.
inline uint2 operator/( const uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Divides each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator/=( uint2& lhs, const uint32_t scalar );

/// \relates uint2
/// \brief Returns a copy of the uint2 that has been component-wise divided by the corresponding component of the right-hand uint2.
inline uint2 operator/( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Divides each component of the uint2 by the corresponding component of the right-hand uint2.
inline uint2 operator/=( uint2&& lhs, const uint2& rhs );

// prefix
/// \relates uint2
/// \brief Prefix increment operator.  Adds one to each component of the given uint2 before evaluation.
inline uint2& operator++( uint2& lhs );

// postfix
/// \relates uint2
/// \brief Postfix increment operator.  Adds one to each component of the given uint2 after evaluation.
inline uint2& operator++( uint2& lhs, const int );
// prefix
/// \relates uint2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given uint2 before evaluation.
inline uint2& operator--( uint2& lhs );

// postfix
/// \relates uint2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given uint2 after evaluation.
inline uint2& operator--( uint2& lhs, const int );
/// \relates uint2
/// \brief Returns a copy of the uint2 where each component of the left-hand uint2 has been bitwise AND'd against the corresponding component of the right-hand side uint2.
inline uint2 operator&( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Performs a bitwise AND on the given left-hand uint2 against the corresponding component of the given right-hand uint2.
inline uint2 operator&=( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 where each component of the left-hand uint2 has been bitwise OR'd against the corresponding component of the right-hand side uint2.
inline uint2 operator|( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Performs a bitwise OR on the given left-hand uint2 against the corresponding component of the given right-hand uint2.
inline uint2 operator|=( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 where each component of the left-hand uint2 has been bitwise XOR'd against the corresponding component of the right-hand side uint2.
inline uint2 operator^( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Performs a bitwise XOR on the given left-hand uint2 against the corresponding component of the given right-hand uint2.
inline uint2 operator^=( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 where each component of the left-hand uint2 has been bitwise left-shifted by the corresponding component of the right-hand side uint2.
inline uint2 operator<<( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Performs a left bitshift on the given left-hand uint2 by the corresponding component of the given right-hand uint2.
inline uint2 operator<<=( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a copy of the uint2 where each component of the left-hand uint2 has been bitwise right-shifted by the corresponding component of the right-hand side uint2.
inline uint2 operator>>( const uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Performs a right bitshift on the given left-hand uint2 by the corresponding component of the given right-hand uint2.
inline uint2 operator>>=( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Performs a unary bitwise operation on all components of the given uint2.
inline uint2 operator~( const uint2& lhs );

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( uint2& lhs, const uint2& rhs );

/// \relates uint2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( uint2& lhs, const uint2& rhs );


// uint3
inline bool operator==( const uint3& lhs, const uint3& rhs );

inline bool operator!=( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise added by the corresponding component of the right-hand uint3.
inline uint3 operator+( const uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Adds each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator+=( uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise added by the corresponding component of the right-hand uint3.
inline uint3 operator+( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Adds each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator+=( uint3&& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise subtracted by the corresponding component of the right-hand uint3.
inline uint3 operator-( const uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Subtracts each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator-=( uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise subtracted by the corresponding component of the right-hand uint3.
inline uint3 operator-( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Subtracts each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator-=( uint3&& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise multiplied by the corresponding component of the right-hand uint3.
inline uint3 operator*( const uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Multiplies each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator*=( uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise multiplied by the corresponding component of the right-hand uint3.
inline uint3 operator*( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Multiplies each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator*=( uint3&& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise divided by the corresponding component of the right-hand uint3.
inline uint3 operator/( const uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Divides each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator/=( uint3& lhs, const uint32_t scalar );

/// \relates uint3
/// \brief Returns a copy of the uint3 that has been component-wise divided by the corresponding component of the right-hand uint3.
inline uint3 operator/( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Divides each component of the uint3 by the corresponding component of the right-hand uint3.
inline uint3 operator/=( uint3&& lhs, const uint3& rhs );

// prefix
/// \relates uint3
/// \brief Prefix increment operator.  Adds one to each component of the given uint3 before evaluation.
inline uint3& operator++( uint3& lhs );

// postfix
/// \relates uint3
/// \brief Postfix increment operator.  Adds one to each component of the given uint3 after evaluation.
inline uint3& operator++( uint3& lhs, const int );
// prefix
/// \relates uint3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given uint3 before evaluation.
inline uint3& operator--( uint3& lhs );

// postfix
/// \relates uint3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given uint3 after evaluation.
inline uint3& operator--( uint3& lhs, const int );
/// \relates uint3
/// \brief Returns a copy of the uint3 where each component of the left-hand uint3 has been bitwise AND'd against the corresponding component of the right-hand side uint3.
inline uint3 operator&( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Performs a bitwise AND on the given left-hand uint3 against the corresponding component of the given right-hand uint3.
inline uint3 operator&=( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 where each component of the left-hand uint3 has been bitwise OR'd against the corresponding component of the right-hand side uint3.
inline uint3 operator|( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Performs a bitwise OR on the given left-hand uint3 against the corresponding component of the given right-hand uint3.
inline uint3 operator|=( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 where each component of the left-hand uint3 has been bitwise XOR'd against the corresponding component of the right-hand side uint3.
inline uint3 operator^( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Performs a bitwise XOR on the given left-hand uint3 against the corresponding component of the given right-hand uint3.
inline uint3 operator^=( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 where each component of the left-hand uint3 has been bitwise left-shifted by the corresponding component of the right-hand side uint3.
inline uint3 operator<<( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Performs a left bitshift on the given left-hand uint3 by the corresponding component of the given right-hand uint3.
inline uint3 operator<<=( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a copy of the uint3 where each component of the left-hand uint3 has been bitwise right-shifted by the corresponding component of the right-hand side uint3.
inline uint3 operator>>( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Performs a right bitshift on the given left-hand uint3 by the corresponding component of the given right-hand uint3.
inline uint3 operator>>=( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Performs a unary bitwise operation on all components of the given uint3.
inline uint3 operator~( const uint3& lhs );

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( uint3& lhs, const uint3& rhs );


// uint4
inline bool operator==( const uint4& lhs, const uint4& rhs );

inline bool operator!=( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise added by the corresponding component of the right-hand uint4.
inline uint4 operator+( const uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Adds each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator+=( uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise added by the corresponding component of the right-hand uint4.
inline uint4 operator+( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Adds each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator+=( uint4&& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise subtracted by the corresponding component of the right-hand uint4.
inline uint4 operator-( const uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Subtracts each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator-=( uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise subtracted by the corresponding component of the right-hand uint4.
inline uint4 operator-( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Subtracts each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator-=( uint4&& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise multiplied by the corresponding component of the right-hand uint4.
inline uint4 operator*( const uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Multiplies each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator*=( uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise multiplied by the corresponding component of the right-hand uint4.
inline uint4 operator*( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Multiplies each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator*=( uint4&& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise divided by the corresponding component of the right-hand uint4.
inline uint4 operator/( const uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Divides each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator/=( uint4& lhs, const uint32_t scalar );

/// \relates uint4
/// \brief Returns a copy of the uint4 that has been component-wise divided by the corresponding component of the right-hand uint4.
inline uint4 operator/( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Divides each component of the uint4 by the corresponding component of the right-hand uint4.
inline uint4 operator/=( uint4&& lhs, const uint4& rhs );

// prefix
/// \relates uint4
/// \brief Prefix increment operator.  Adds one to each component of the given uint4 before evaluation.
inline uint4& operator++( uint4& lhs );

// postfix
/// \relates uint4
/// \brief Postfix increment operator.  Adds one to each component of the given uint4 after evaluation.
inline uint4& operator++( uint4& lhs, const int );
// prefix
/// \relates uint4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given uint4 before evaluation.
inline uint4& operator--( uint4& lhs );

// postfix
/// \relates uint4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given uint4 after evaluation.
inline uint4& operator--( uint4& lhs, const int );
/// \relates uint4
/// \brief Returns a copy of the uint4 where each component of the left-hand uint4 has been bitwise AND'd against the corresponding component of the right-hand side uint4.
inline uint4 operator&( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Performs a bitwise AND on the given left-hand uint4 against the corresponding component of the given right-hand uint4.
inline uint4 operator&=( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 where each component of the left-hand uint4 has been bitwise OR'd against the corresponding component of the right-hand side uint4.
inline uint4 operator|( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Performs a bitwise OR on the given left-hand uint4 against the corresponding component of the given right-hand uint4.
inline uint4 operator|=( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 where each component of the left-hand uint4 has been bitwise XOR'd against the corresponding component of the right-hand side uint4.
inline uint4 operator^( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Performs a bitwise XOR on the given left-hand uint4 against the corresponding component of the given right-hand uint4.
inline uint4 operator^=( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 where each component of the left-hand uint4 has been bitwise left-shifted by the corresponding component of the right-hand side uint4.
inline uint4 operator<<( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Performs a left bitshift on the given left-hand uint4 by the corresponding component of the given right-hand uint4.
inline uint4 operator<<=( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a copy of the uint4 where each component of the left-hand uint4 has been bitwise right-shifted by the corresponding component of the right-hand side uint4.
inline uint4 operator>>( const uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Performs a right bitshift on the given left-hand uint4 by the corresponding component of the given right-hand uint4.
inline uint4 operator>>=( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Performs a unary bitwise operation on all components of the given uint4.
inline uint4 operator~( const uint4& lhs );

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( uint4& lhs, const uint4& rhs );

/// \relates uint4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( uint4& lhs, const uint4& rhs );


// float2
inline bool operator==( const float2& lhs, const float2& rhs );

inline bool operator!=( const float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise added by the corresponding component of the right-hand float2.
inline float2 operator+( const float2& lhs, const float scalar );

/// \relates float2
/// \brief Adds each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator+=( float2& lhs, const float scalar );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise added by the corresponding component of the right-hand float2.
inline float2 operator+( const float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Adds each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator+=( float2&& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise subtracted by the corresponding component of the right-hand float2.
inline float2 operator-( const float2& lhs, const float scalar );

/// \relates float2
/// \brief Subtracts each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator-=( float2& lhs, const float scalar );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise subtracted by the corresponding component of the right-hand float2.
inline float2 operator-( const float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Subtracts each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator-=( float2&& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise multiplied by the corresponding component of the right-hand float2.
inline float2 operator*( const float2& lhs, const float scalar );

/// \relates float2
/// \brief Multiplies each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator*=( float2& lhs, const float scalar );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise multiplied by the corresponding component of the right-hand float2.
inline float2 operator*( const float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Multiplies each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator*=( float2&& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise divided by the corresponding component of the right-hand float2.
inline float2 operator/( const float2& lhs, const float scalar );

/// \relates float2
/// \brief Divides each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator/=( float2& lhs, const float scalar );

/// \relates float2
/// \brief Returns a copy of the float2 that has been component-wise divided by the corresponding component of the right-hand float2.
inline float2 operator/( const float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Divides each component of the float2 by the corresponding component of the right-hand float2.
inline float2 operator/=( float2&& lhs, const float2& rhs );

// prefix
/// \relates float2
/// \brief Prefix increment operator.  Adds one to each component of the given float2 before evaluation.
inline float2& operator++( float2& lhs );

// postfix
/// \relates float2
/// \brief Postfix increment operator.  Adds one to each component of the given float2 after evaluation.
inline float2& operator++( float2& lhs, const int );
// prefix
/// \relates float2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given float2 before evaluation.
inline float2& operator--( float2& lhs );

// postfix
/// \relates float2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given float2 after evaluation.
inline float2& operator--( float2& lhs, const int );
/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( float2& lhs, const float2& rhs );

/// \relates float2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( float2& lhs, const float2& rhs );


// float3
inline bool operator==( const float3& lhs, const float3& rhs );

inline bool operator!=( const float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise added by the corresponding component of the right-hand float3.
inline float3 operator+( const float3& lhs, const float scalar );

/// \relates float3
/// \brief Adds each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator+=( float3& lhs, const float scalar );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise added by the corresponding component of the right-hand float3.
inline float3 operator+( const float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Adds each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator+=( float3&& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise subtracted by the corresponding component of the right-hand float3.
inline float3 operator-( const float3& lhs, const float scalar );

/// \relates float3
/// \brief Subtracts each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator-=( float3& lhs, const float scalar );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise subtracted by the corresponding component of the right-hand float3.
inline float3 operator-( const float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Subtracts each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator-=( float3&& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise multiplied by the corresponding component of the right-hand float3.
inline float3 operator*( const float3& lhs, const float scalar );

/// \relates float3
/// \brief Multiplies each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator*=( float3& lhs, const float scalar );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise multiplied by the corresponding component of the right-hand float3.
inline float3 operator*( const float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Multiplies each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator*=( float3&& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise divided by the corresponding component of the right-hand float3.
inline float3 operator/( const float3& lhs, const float scalar );

/// \relates float3
/// \brief Divides each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator/=( float3& lhs, const float scalar );

/// \relates float3
/// \brief Returns a copy of the float3 that has been component-wise divided by the corresponding component of the right-hand float3.
inline float3 operator/( const float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Divides each component of the float3 by the corresponding component of the right-hand float3.
inline float3 operator/=( float3&& lhs, const float3& rhs );

// prefix
/// \relates float3
/// \brief Prefix increment operator.  Adds one to each component of the given float3 before evaluation.
inline float3& operator++( float3& lhs );

// postfix
/// \relates float3
/// \brief Postfix increment operator.  Adds one to each component of the given float3 after evaluation.
inline float3& operator++( float3& lhs, const int );
// prefix
/// \relates float3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given float3 before evaluation.
inline float3& operator--( float3& lhs );

// postfix
/// \relates float3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given float3 after evaluation.
inline float3& operator--( float3& lhs, const int );
/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( float3& lhs, const float3& rhs );

/// \relates float3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( float3& lhs, const float3& rhs );


// float4
inline bool operator==( const float4& lhs, const float4& rhs );

inline bool operator!=( const float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise added by the corresponding component of the right-hand float4.
inline float4 operator+( const float4& lhs, const float scalar );

/// \relates float4
/// \brief Adds each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator+=( float4& lhs, const float scalar );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise added by the corresponding component of the right-hand float4.
inline float4 operator+( const float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Adds each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator+=( float4&& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise subtracted by the corresponding component of the right-hand float4.
inline float4 operator-( const float4& lhs, const float scalar );

/// \relates float4
/// \brief Subtracts each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator-=( float4& lhs, const float scalar );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise subtracted by the corresponding component of the right-hand float4.
inline float4 operator-( const float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Subtracts each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator-=( float4&& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise multiplied by the corresponding component of the right-hand float4.
inline float4 operator*( const float4& lhs, const float scalar );

/// \relates float4
/// \brief Multiplies each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator*=( float4& lhs, const float scalar );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise multiplied by the corresponding component of the right-hand float4.
inline float4 operator*( const float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Multiplies each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator*=( float4&& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise divided by the corresponding component of the right-hand float4.
inline float4 operator/( const float4& lhs, const float scalar );

/// \relates float4
/// \brief Divides each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator/=( float4& lhs, const float scalar );

/// \relates float4
/// \brief Returns a copy of the float4 that has been component-wise divided by the corresponding component of the right-hand float4.
inline float4 operator/( const float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Divides each component of the float4 by the corresponding component of the right-hand float4.
inline float4 operator/=( float4&& lhs, const float4& rhs );

// prefix
/// \relates float4
/// \brief Prefix increment operator.  Adds one to each component of the given float4 before evaluation.
inline float4& operator++( float4& lhs );

// postfix
/// \relates float4
/// \brief Postfix increment operator.  Adds one to each component of the given float4 after evaluation.
inline float4& operator++( float4& lhs, const int );
// prefix
/// \relates float4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given float4 before evaluation.
inline float4& operator--( float4& lhs );

// postfix
/// \relates float4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given float4 after evaluation.
inline float4& operator--( float4& lhs, const int );
/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( float4& lhs, const float4& rhs );

/// \relates float4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( float4& lhs, const float4& rhs );


// double2
inline bool operator==( const double2& lhs, const double2& rhs );

inline bool operator!=( const double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise added by the corresponding component of the right-hand double2.
inline double2 operator+( const double2& lhs, const double scalar );

/// \relates double2
/// \brief Adds each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator+=( double2& lhs, const double scalar );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise added by the corresponding component of the right-hand double2.
inline double2 operator+( const double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Adds each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator+=( double2&& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise subtracted by the corresponding component of the right-hand double2.
inline double2 operator-( const double2& lhs, const double scalar );

/// \relates double2
/// \brief Subtracts each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator-=( double2& lhs, const double scalar );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise subtracted by the corresponding component of the right-hand double2.
inline double2 operator-( const double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Subtracts each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator-=( double2&& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise multiplied by the corresponding component of the right-hand double2.
inline double2 operator*( const double2& lhs, const double scalar );

/// \relates double2
/// \brief Multiplies each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator*=( double2& lhs, const double scalar );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise multiplied by the corresponding component of the right-hand double2.
inline double2 operator*( const double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Multiplies each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator*=( double2&& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise divided by the corresponding component of the right-hand double2.
inline double2 operator/( const double2& lhs, const double scalar );

/// \relates double2
/// \brief Divides each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator/=( double2& lhs, const double scalar );

/// \relates double2
/// \brief Returns a copy of the double2 that has been component-wise divided by the corresponding component of the right-hand double2.
inline double2 operator/( const double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Divides each component of the double2 by the corresponding component of the right-hand double2.
inline double2 operator/=( double2&& lhs, const double2& rhs );

// prefix
/// \relates double2
/// \brief Prefix increment operator.  Adds one to each component of the given double2 before evaluation.
inline double2& operator++( double2& lhs );

// postfix
/// \relates double2
/// \brief Postfix increment operator.  Adds one to each component of the given double2 after evaluation.
inline double2& operator++( double2& lhs, const int );
// prefix
/// \relates double2
/// \brief Prefix decrement operator.  Subtracts one from each component of the given double2 before evaluation.
inline double2& operator--( double2& lhs );

// postfix
/// \relates double2
/// \brief Postfix decrement operator.  Subtracts one from each component of the given double2 after evaluation.
inline double2& operator--( double2& lhs, const int );
/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool2 operator<( double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool2 operator<=( double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool2 operator>( double2& lhs, const double2& rhs );

/// \relates double2
/// \brief Returns a bool2 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool2 operator>=( double2& lhs, const double2& rhs );


// double3
inline bool operator==( const double3& lhs, const double3& rhs );

inline bool operator!=( const double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise added by the corresponding component of the right-hand double3.
inline double3 operator+( const double3& lhs, const double scalar );

/// \relates double3
/// \brief Adds each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator+=( double3& lhs, const double scalar );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise added by the corresponding component of the right-hand double3.
inline double3 operator+( const double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Adds each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator+=( double3&& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise subtracted by the corresponding component of the right-hand double3.
inline double3 operator-( const double3& lhs, const double scalar );

/// \relates double3
/// \brief Subtracts each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator-=( double3& lhs, const double scalar );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise subtracted by the corresponding component of the right-hand double3.
inline double3 operator-( const double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Subtracts each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator-=( double3&& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise multiplied by the corresponding component of the right-hand double3.
inline double3 operator*( const double3& lhs, const double scalar );

/// \relates double3
/// \brief Multiplies each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator*=( double3& lhs, const double scalar );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise multiplied by the corresponding component of the right-hand double3.
inline double3 operator*( const double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Multiplies each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator*=( double3&& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise divided by the corresponding component of the right-hand double3.
inline double3 operator/( const double3& lhs, const double scalar );

/// \relates double3
/// \brief Divides each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator/=( double3& lhs, const double scalar );

/// \relates double3
/// \brief Returns a copy of the double3 that has been component-wise divided by the corresponding component of the right-hand double3.
inline double3 operator/( const double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Divides each component of the double3 by the corresponding component of the right-hand double3.
inline double3 operator/=( double3&& lhs, const double3& rhs );

// prefix
/// \relates double3
/// \brief Prefix increment operator.  Adds one to each component of the given double3 before evaluation.
inline double3& operator++( double3& lhs );

// postfix
/// \relates double3
/// \brief Postfix increment operator.  Adds one to each component of the given double3 after evaluation.
inline double3& operator++( double3& lhs, const int );
// prefix
/// \relates double3
/// \brief Prefix decrement operator.  Subtracts one from each component of the given double3 before evaluation.
inline double3& operator--( double3& lhs );

// postfix
/// \relates double3
/// \brief Postfix decrement operator.  Subtracts one from each component of the given double3 after evaluation.
inline double3& operator--( double3& lhs, const int );
/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool3 operator<( double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool3 operator<=( double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool3 operator>( double3& lhs, const double3& rhs );

/// \relates double3
/// \brief Returns a bool3 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool3 operator>=( double3& lhs, const double3& rhs );


// double4
inline bool operator==( const double4& lhs, const double4& rhs );

inline bool operator!=( const double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise added by the corresponding component of the right-hand double4.
inline double4 operator+( const double4& lhs, const double scalar );

/// \relates double4
/// \brief Adds each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator+=( double4& lhs, const double scalar );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise added by the corresponding component of the right-hand double4.
inline double4 operator+( const double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Adds each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator+=( double4&& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise subtracted by the corresponding component of the right-hand double4.
inline double4 operator-( const double4& lhs, const double scalar );

/// \relates double4
/// \brief Subtracts each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator-=( double4& lhs, const double scalar );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise subtracted by the corresponding component of the right-hand double4.
inline double4 operator-( const double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Subtracts each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator-=( double4&& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise multiplied by the corresponding component of the right-hand double4.
inline double4 operator*( const double4& lhs, const double scalar );

/// \relates double4
/// \brief Multiplies each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator*=( double4& lhs, const double scalar );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise multiplied by the corresponding component of the right-hand double4.
inline double4 operator*( const double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Multiplies each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator*=( double4&& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise divided by the corresponding component of the right-hand double4.
inline double4 operator/( const double4& lhs, const double scalar );

/// \relates double4
/// \brief Divides each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator/=( double4& lhs, const double scalar );

/// \relates double4
/// \brief Returns a copy of the double4 that has been component-wise divided by the corresponding component of the right-hand double4.
inline double4 operator/( const double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Divides each component of the double4 by the corresponding component of the right-hand double4.
inline double4 operator/=( double4&& lhs, const double4& rhs );

// prefix
/// \relates double4
/// \brief Prefix increment operator.  Adds one to each component of the given double4 before evaluation.
inline double4& operator++( double4& lhs );

// postfix
/// \relates double4
/// \brief Postfix increment operator.  Adds one to each component of the given double4 after evaluation.
inline double4& operator++( double4& lhs, const int );
// prefix
/// \relates double4
/// \brief Prefix decrement operator.  Subtracts one from each component of the given double4 before evaluation.
inline double4& operator--( double4& lhs );

// postfix
/// \relates double4
/// \brief Postfix decrement operator.  Subtracts one from each component of the given double4 after evaluation.
inline double4& operator--( double4& lhs, const int );
/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than the corresponding right-hand type component.
inline bool4 operator<( double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is less than or equal to the corresponding right-hand type component.
inline bool4 operator<=( double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than the corresponding right-hand type component.
inline bool4 operator>( double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns a bool4 where each component is true if the component of the left-hand type is greater than or equal to the corresponding right-hand type component.
inline bool4 operator>=( double4& lhs, const double4& rhs );


bool operator==( const bool2& lhs, const bool2& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y );
}

bool operator!=( const bool2& lhs, const bool2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

bool2 operator+( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

bool2 operator+=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs + scalar );
}

bool2 operator-( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

bool2 operator-=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs - scalar );
}

bool2 operator*( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

bool2 operator*=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs * scalar );
}

bool2 operator/( const bool2& lhs, const bool32_t scalar )
{
	return bool2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

bool2 operator/=( bool2& lhs, const bool32_t scalar )
{
	return ( lhs = lhs / scalar );
}

bool2 operator<( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

bool2 operator<=( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

bool2 operator>( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

bool2 operator>=( bool2& lhs, const bool2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}

bool operator==( const bool3& lhs, const bool3& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z );
}

bool operator!=( const bool3& lhs, const bool3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

bool3 operator+( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

bool3 operator+=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs + scalar );
}

bool3 operator-( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

bool3 operator-=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs - scalar );
}

bool3 operator*( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

bool3 operator*=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs * scalar );
}

bool3 operator/( const bool3& lhs, const bool32_t scalar )
{
	return bool3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

bool3 operator/=( bool3& lhs, const bool32_t scalar )
{
	return ( lhs = lhs / scalar );
}

bool3 operator<( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

bool3 operator<=( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

bool3 operator>( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

bool3 operator>=( bool3& lhs, const bool3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}

bool operator==( const bool4& lhs, const bool4& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z ) && ( lhs.w == rhs.w );
}

bool operator!=( const bool4& lhs, const bool4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

bool4 operator+( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

bool4 operator+=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs + scalar );
}

bool4 operator-( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

bool4 operator-=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs - scalar );
}

bool4 operator*( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

bool4 operator*=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs * scalar );
}

bool4 operator/( const bool4& lhs, const bool32_t scalar )
{
	return bool4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

bool4 operator/=( bool4& lhs, const bool32_t scalar )
{
	return ( lhs = lhs / scalar );
}

bool4 operator<( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

bool4 operator<=( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

bool4 operator>( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

bool4 operator>=( bool4& lhs, const bool4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}

bool operator==( const int2& lhs, const int2& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y );
}

bool operator!=( const int2& lhs, const int2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

int2 operator+( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

int2 operator+=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs + scalar );
}

int2 operator+( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

int2 operator+=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs + rhs );
}

int2 operator-( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

int2 operator-=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs - scalar );
}

int2 operator-( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

int2 operator-=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs - rhs );
}

int2 operator*( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

int2 operator*=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs * scalar );
}

int2 operator*( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

int2 operator*=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs * rhs );
}

int2 operator/( const int2& lhs, const int32_t scalar )
{
	return int2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

int2 operator/=( int2& lhs, const int32_t scalar )
{
	return ( lhs = lhs / scalar );
}

int2 operator/( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

int2 operator/=( int2&& lhs, const int2& rhs )
{
	return ( lhs = lhs / rhs );
}

int2& operator++( int2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

int2& operator++( int2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

int2& operator--( int2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

int2& operator--( int2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

int2 operator&( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y
	};
}

int2 operator&=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs & rhs );
}

int2 operator|( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y
	};
}

int2 operator|=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs | rhs );
}

int2 operator^( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y
	};
}

int2 operator^=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs ^ rhs );
}

int2 operator<<( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y
	};
}

int2 operator<<=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs << rhs );
}

int2 operator>>( const int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( int2 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y
	};
}

int2 operator>>=( int2& lhs, const int2& rhs )
{
	return ( lhs = lhs >> rhs );
}

int2 operator~( const int2& lhs )
{
	return HLML_CONSTRUCT( int2 ) {
		~lhs.x,
		~lhs.y
	};
}

bool2 operator<( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

bool2 operator<=( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

bool2 operator>( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

bool2 operator>=( int2& lhs, const int2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}

bool operator==( const int3& lhs, const int3& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z );
}

bool operator!=( const int3& lhs, const int3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

int3 operator+( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

int3 operator+=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs + scalar );
}

int3 operator+( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

int3 operator+=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs + rhs );
}

int3 operator-( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

int3 operator-=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs - scalar );
}

int3 operator-( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

int3 operator-=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs - rhs );
}

int3 operator*( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

int3 operator*=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs * scalar );
}

int3 operator*( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

int3 operator*=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs * rhs );
}

int3 operator/( const int3& lhs, const int32_t scalar )
{
	return int3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

int3 operator/=( int3& lhs, const int32_t scalar )
{
	return ( lhs = lhs / scalar );
}

int3 operator/( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

int3 operator/=( int3&& lhs, const int3& rhs )
{
	return ( lhs = lhs / rhs );
}

int3& operator++( int3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

int3& operator++( int3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

int3& operator--( int3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

int3& operator--( int3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

int3 operator&( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z
	};
}

int3 operator&=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs & rhs );
}

int3 operator|( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z
	};
}

int3 operator|=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs | rhs );
}

int3 operator^( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z
	};
}

int3 operator^=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs ^ rhs );
}

int3 operator<<( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z
	};
}

int3 operator<<=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs << rhs );
}

int3 operator>>( const int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( int3 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z
	};
}

int3 operator>>=( int3& lhs, const int3& rhs )
{
	return ( lhs = lhs >> rhs );
}

int3 operator~( const int3& lhs )
{
	return HLML_CONSTRUCT( int3 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z
	};
}

bool3 operator<( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

bool3 operator<=( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

bool3 operator>( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

bool3 operator>=( int3& lhs, const int3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}

bool operator==( const int4& lhs, const int4& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z ) && ( lhs.w == rhs.w );
}

bool operator!=( const int4& lhs, const int4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

int4 operator+( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

int4 operator+=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs + scalar );
}

int4 operator+( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

int4 operator+=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs + rhs );
}

int4 operator-( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

int4 operator-=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs - scalar );
}

int4 operator-( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

int4 operator-=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs - rhs );
}

int4 operator*( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

int4 operator*=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs * scalar );
}

int4 operator*( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

int4 operator*=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs * rhs );
}

int4 operator/( const int4& lhs, const int32_t scalar )
{
	return int4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

int4 operator/=( int4& lhs, const int32_t scalar )
{
	return ( lhs = lhs / scalar );
}

int4 operator/( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

int4 operator/=( int4&& lhs, const int4& rhs )
{
	return ( lhs = lhs / rhs );
}

int4& operator++( int4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

int4& operator++( int4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

int4& operator--( int4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

int4& operator--( int4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

int4 operator&( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z,
		lhs.w & rhs.w
	};
}

int4 operator&=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs & rhs );
}

int4 operator|( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z,
		lhs.w | rhs.w
	};
}

int4 operator|=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs | rhs );
}

int4 operator^( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z,
		lhs.w ^ rhs.w
	};
}

int4 operator^=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs ^ rhs );
}

int4 operator<<( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z,
		lhs.w << rhs.w
	};
}

int4 operator<<=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs << rhs );
}

int4 operator>>( const int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( int4 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z,
		lhs.w >> rhs.w
	};
}

int4 operator>>=( int4& lhs, const int4& rhs )
{
	return ( lhs = lhs >> rhs );
}

int4 operator~( const int4& lhs )
{
	return HLML_CONSTRUCT( int4 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z,
		~lhs.w
	};
}

bool4 operator<( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

bool4 operator<=( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

bool4 operator>( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

bool4 operator>=( int4& lhs, const int4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}

bool operator==( const uint2& lhs, const uint2& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y );
}

bool operator!=( const uint2& lhs, const uint2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

uint2 operator+( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

uint2 operator+=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs + scalar );
}

uint2 operator+( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

uint2 operator+=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs + rhs );
}

uint2 operator-( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

uint2 operator-=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs - scalar );
}

uint2 operator-( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

uint2 operator-=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs - rhs );
}

uint2 operator*( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

uint2 operator*=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs * scalar );
}

uint2 operator*( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

uint2 operator*=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs * rhs );
}

uint2 operator/( const uint2& lhs, const uint32_t scalar )
{
	return uint2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

uint2 operator/=( uint2& lhs, const uint32_t scalar )
{
	return ( lhs = lhs / scalar );
}

uint2 operator/( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

uint2 operator/=( uint2&& lhs, const uint2& rhs )
{
	return ( lhs = lhs / rhs );
}

uint2& operator++( uint2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

uint2& operator++( uint2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

uint2& operator--( uint2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

uint2& operator--( uint2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

uint2 operator&( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y
	};
}

uint2 operator&=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs & rhs );
}

uint2 operator|( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y
	};
}

uint2 operator|=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs | rhs );
}

uint2 operator^( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y
	};
}

uint2 operator^=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs ^ rhs );
}

uint2 operator<<( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y
	};
}

uint2 operator<<=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs << rhs );
}

uint2 operator>>( const uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y
	};
}

uint2 operator>>=( uint2& lhs, const uint2& rhs )
{
	return ( lhs = lhs >> rhs );
}

uint2 operator~( const uint2& lhs )
{
	return HLML_CONSTRUCT( uint2 ) {
		~lhs.x,
		~lhs.y
	};
}

bool2 operator<( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

bool2 operator<=( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

bool2 operator>( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

bool2 operator>=( uint2& lhs, const uint2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}

bool operator==( const uint3& lhs, const uint3& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z );
}

bool operator!=( const uint3& lhs, const uint3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

uint3 operator+( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

uint3 operator+=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs + scalar );
}

uint3 operator+( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

uint3 operator+=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs + rhs );
}

uint3 operator-( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

uint3 operator-=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs - scalar );
}

uint3 operator-( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

uint3 operator-=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs - rhs );
}

uint3 operator*( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

uint3 operator*=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs * scalar );
}

uint3 operator*( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

uint3 operator*=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs * rhs );
}

uint3 operator/( const uint3& lhs, const uint32_t scalar )
{
	return uint3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

uint3 operator/=( uint3& lhs, const uint32_t scalar )
{
	return ( lhs = lhs / scalar );
}

uint3 operator/( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

uint3 operator/=( uint3&& lhs, const uint3& rhs )
{
	return ( lhs = lhs / rhs );
}

uint3& operator++( uint3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

uint3& operator++( uint3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

uint3& operator--( uint3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

uint3& operator--( uint3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

uint3 operator&( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z
	};
}

uint3 operator&=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs & rhs );
}

uint3 operator|( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z
	};
}

uint3 operator|=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs | rhs );
}

uint3 operator^( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z
	};
}

uint3 operator^=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs ^ rhs );
}

uint3 operator<<( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z
	};
}

uint3 operator<<=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs << rhs );
}

uint3 operator>>( const uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z
	};
}

uint3 operator>>=( uint3& lhs, const uint3& rhs )
{
	return ( lhs = lhs >> rhs );
}

uint3 operator~( const uint3& lhs )
{
	return HLML_CONSTRUCT( uint3 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z
	};
}

bool3 operator<( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

bool3 operator<=( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

bool3 operator>( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

bool3 operator>=( uint3& lhs, const uint3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}

bool operator==( const uint4& lhs, const uint4& rhs )
{
	return ( lhs.x == rhs.x ) && ( lhs.y == rhs.y ) && ( lhs.z == rhs.z ) && ( lhs.w == rhs.w );
}

bool operator!=( const uint4& lhs, const uint4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

uint4 operator+( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

uint4 operator+=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs + scalar );
}

uint4 operator+( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

uint4 operator+=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs + rhs );
}

uint4 operator-( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

uint4 operator-=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs - scalar );
}

uint4 operator-( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

uint4 operator-=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs - rhs );
}

uint4 operator*( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

uint4 operator*=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs * scalar );
}

uint4 operator*( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

uint4 operator*=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs * rhs );
}

uint4 operator/( const uint4& lhs, const uint32_t scalar )
{
	return uint4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

uint4 operator/=( uint4& lhs, const uint32_t scalar )
{
	return ( lhs = lhs / scalar );
}

uint4 operator/( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

uint4 operator/=( uint4&& lhs, const uint4& rhs )
{
	return ( lhs = lhs / rhs );
}

uint4& operator++( uint4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

uint4& operator++( uint4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

uint4& operator--( uint4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

uint4& operator--( uint4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

uint4 operator&( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x & rhs.x,
		lhs.y & rhs.y,
		lhs.z & rhs.z,
		lhs.w & rhs.w
	};
}

uint4 operator&=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs & rhs );
}

uint4 operator|( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x | rhs.x,
		lhs.y | rhs.y,
		lhs.z | rhs.z,
		lhs.w | rhs.w
	};
}

uint4 operator|=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs | rhs );
}

uint4 operator^( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x ^ rhs.x,
		lhs.y ^ rhs.y,
		lhs.z ^ rhs.z,
		lhs.w ^ rhs.w
	};
}

uint4 operator^=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs ^ rhs );
}

uint4 operator<<( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x << rhs.x,
		lhs.y << rhs.y,
		lhs.z << rhs.z,
		lhs.w << rhs.w
	};
}

uint4 operator<<=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs << rhs );
}

uint4 operator>>( const uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		lhs.x >> rhs.x,
		lhs.y >> rhs.y,
		lhs.z >> rhs.z,
		lhs.w >> rhs.w
	};
}

uint4 operator>>=( uint4& lhs, const uint4& rhs )
{
	return ( lhs = lhs >> rhs );
}

uint4 operator~( const uint4& lhs )
{
	return HLML_CONSTRUCT( uint4 ) {
		~lhs.x,
		~lhs.y,
		~lhs.z,
		~lhs.w
	};
}

bool4 operator<( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

bool4 operator<=( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

bool4 operator>( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

bool4 operator>=( uint4& lhs, const uint4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}

bool operator==( const float2& lhs, const float2& rhs )
{
	return floateq( lhs.x, rhs.x ) && floateq( lhs.y, rhs.y );
}

bool operator!=( const float2& lhs, const float2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

float2 operator+( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

float2 operator+=( float2& lhs, const float scalar )
{
	return ( lhs = lhs + scalar );
}

float2 operator+( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

float2 operator+=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs + rhs );
}

float2 operator-( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

float2 operator-=( float2& lhs, const float scalar )
{
	return ( lhs = lhs - scalar );
}

float2 operator-( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

float2 operator-=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs - rhs );
}

float2 operator*( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

float2 operator*=( float2& lhs, const float scalar )
{
	return ( lhs = lhs * scalar );
}

float2 operator*( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

float2 operator*=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs * rhs );
}

float2 operator/( const float2& lhs, const float scalar )
{
	return float2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

float2 operator/=( float2& lhs, const float scalar )
{
	return ( lhs = lhs / scalar );
}

float2 operator/( const float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( float2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

float2 operator/=( float2&& lhs, const float2& rhs )
{
	return ( lhs = lhs / rhs );
}

float2& operator++( float2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

float2& operator++( float2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

float2& operator--( float2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

float2& operator--( float2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

bool2 operator<( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

bool2 operator<=( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

bool2 operator>( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

bool2 operator>=( float2& lhs, const float2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}

bool operator==( const float3& lhs, const float3& rhs )
{
	return floateq( lhs.x, rhs.x ) && floateq( lhs.y, rhs.y ) && floateq( lhs.z, rhs.z );
}

bool operator!=( const float3& lhs, const float3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

float3 operator+( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

float3 operator+=( float3& lhs, const float scalar )
{
	return ( lhs = lhs + scalar );
}

float3 operator+( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

float3 operator+=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs + rhs );
}

float3 operator-( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

float3 operator-=( float3& lhs, const float scalar )
{
	return ( lhs = lhs - scalar );
}

float3 operator-( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

float3 operator-=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs - rhs );
}

float3 operator*( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

float3 operator*=( float3& lhs, const float scalar )
{
	return ( lhs = lhs * scalar );
}

float3 operator*( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

float3 operator*=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs * rhs );
}

float3 operator/( const float3& lhs, const float scalar )
{
	return float3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

float3 operator/=( float3& lhs, const float scalar )
{
	return ( lhs = lhs / scalar );
}

float3 operator/( const float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( float3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

float3 operator/=( float3&& lhs, const float3& rhs )
{
	return ( lhs = lhs / rhs );
}

float3& operator++( float3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

float3& operator++( float3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

float3& operator--( float3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

float3& operator--( float3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

bool3 operator<( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

bool3 operator<=( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

bool3 operator>( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

bool3 operator>=( float3& lhs, const float3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}

bool operator==( const float4& lhs, const float4& rhs )
{
	return floateq( lhs.x, rhs.x ) && floateq( lhs.y, rhs.y ) && floateq( lhs.z, rhs.z ) && floateq( lhs.w, rhs.w );
}

bool operator!=( const float4& lhs, const float4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

float4 operator+( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

float4 operator+=( float4& lhs, const float scalar )
{
	return ( lhs = lhs + scalar );
}

float4 operator+( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

float4 operator+=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs + rhs );
}

float4 operator-( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

float4 operator-=( float4& lhs, const float scalar )
{
	return ( lhs = lhs - scalar );
}

float4 operator-( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

float4 operator-=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs - rhs );
}

float4 operator*( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

float4 operator*=( float4& lhs, const float scalar )
{
	return ( lhs = lhs * scalar );
}

float4 operator*( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

float4 operator*=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs * rhs );
}

float4 operator/( const float4& lhs, const float scalar )
{
	return float4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

float4 operator/=( float4& lhs, const float scalar )
{
	return ( lhs = lhs / scalar );
}

float4 operator/( const float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( float4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

float4 operator/=( float4&& lhs, const float4& rhs )
{
	return ( lhs = lhs / rhs );
}

float4& operator++( float4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

float4& operator++( float4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

float4& operator--( float4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

float4& operator--( float4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

bool4 operator<( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

bool4 operator<=( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

bool4 operator>( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

bool4 operator>=( float4& lhs, const float4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}

bool operator==( const double2& lhs, const double2& rhs )
{
	return doubleeq( lhs.x, rhs.x ) && doubleeq( lhs.y, rhs.y );
}

bool operator!=( const double2& lhs, const double2& rhs )
{
	return !( operator==( lhs, rhs ) );
}

double2 operator+( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] + scalar,
		lhs[1] + scalar
	);
}

double2 operator+=( double2& lhs, const double scalar )
{
	return ( lhs = lhs + scalar );
}

double2 operator+( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y
	};
}

double2 operator+=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs + rhs );
}

double2 operator-( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] - scalar,
		lhs[1] - scalar
	);
}

double2 operator-=( double2& lhs, const double scalar )
{
	return ( lhs = lhs - scalar );
}

double2 operator-( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y
	};
}

double2 operator-=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs - rhs );
}

double2 operator*( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] * scalar,
		lhs[1] * scalar
	);
}

double2 operator*=( double2& lhs, const double scalar )
{
	return ( lhs = lhs * scalar );
}

double2 operator*( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y
	};
}

double2 operator*=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs * rhs );
}

double2 operator/( const double2& lhs, const double scalar )
{
	return double2(
		lhs[0] / scalar,
		lhs[1] / scalar
	);
}

double2 operator/=( double2& lhs, const double scalar )
{
	return ( lhs = lhs / scalar );
}

double2 operator/( const double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( double2 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y
	};
}

double2 operator/=( double2&& lhs, const double2& rhs )
{
	return ( lhs = lhs / rhs );
}

double2& operator++( double2& lhs )
{
	++lhs[0];
	++lhs[1];
	return lhs;
}

double2& operator++( double2& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	return lhs;
}

double2& operator--( double2& lhs )
{
	--lhs[0];
	--lhs[1];
	return lhs;
}

double2& operator--( double2& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	return lhs;
}

bool2 operator<( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y
	};
}

bool2 operator<=( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y
	};
}

bool2 operator>( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y
	};
}

bool2 operator>=( double2& lhs, const double2& rhs )
{
	return HLML_CONSTRUCT( bool2 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y
	};
}

bool operator==( const double3& lhs, const double3& rhs )
{
	return doubleeq( lhs.x, rhs.x ) && doubleeq( lhs.y, rhs.y ) && doubleeq( lhs.z, rhs.z );
}

bool operator!=( const double3& lhs, const double3& rhs )
{
	return !( operator==( lhs, rhs ) );
}

double3 operator+( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar
	);
}

double3 operator+=( double3& lhs, const double scalar )
{
	return ( lhs = lhs + scalar );
}

double3 operator+( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z
	};
}

double3 operator+=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs + rhs );
}

double3 operator-( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar
	);
}

double3 operator-=( double3& lhs, const double scalar )
{
	return ( lhs = lhs - scalar );
}

double3 operator-( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z
	};
}

double3 operator-=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs - rhs );
}

double3 operator*( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar
	);
}

double3 operator*=( double3& lhs, const double scalar )
{
	return ( lhs = lhs * scalar );
}

double3 operator*( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z
	};
}

double3 operator*=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs * rhs );
}

double3 operator/( const double3& lhs, const double scalar )
{
	return double3(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar
	);
}

double3 operator/=( double3& lhs, const double scalar )
{
	return ( lhs = lhs / scalar );
}

double3 operator/( const double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( double3 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z
	};
}

double3 operator/=( double3&& lhs, const double3& rhs )
{
	return ( lhs = lhs / rhs );
}

double3& operator++( double3& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	return lhs;
}

double3& operator++( double3& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	return lhs;
}

double3& operator--( double3& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	return lhs;
}

double3& operator--( double3& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	return lhs;
}

bool3 operator<( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z
	};
}

bool3 operator<=( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z
	};
}

bool3 operator>( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z
	};
}

bool3 operator>=( double3& lhs, const double3& rhs )
{
	return HLML_CONSTRUCT( bool3 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z
	};
}

bool operator==( const double4& lhs, const double4& rhs )
{
	return doubleeq( lhs.x, rhs.x ) && doubleeq( lhs.y, rhs.y ) && doubleeq( lhs.z, rhs.z ) && doubleeq( lhs.w, rhs.w );
}

bool operator!=( const double4& lhs, const double4& rhs )
{
	return !( operator==( lhs, rhs ) );
}

double4 operator+( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] + scalar,
		lhs[1] + scalar,
		lhs[2] + scalar,
		lhs[3] + scalar
	);
}

double4 operator+=( double4& lhs, const double scalar )
{
	return ( lhs = lhs + scalar );
}

double4 operator+( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x + rhs.x,
		lhs.y + rhs.y,
		lhs.z + rhs.z,
		lhs.w + rhs.w
	};
}

double4 operator+=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs + rhs );
}

double4 operator-( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] - scalar,
		lhs[1] - scalar,
		lhs[2] - scalar,
		lhs[3] - scalar
	);
}

double4 operator-=( double4& lhs, const double scalar )
{
	return ( lhs = lhs - scalar );
}

double4 operator-( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x - rhs.x,
		lhs.y - rhs.y,
		lhs.z - rhs.z,
		lhs.w - rhs.w
	};
}

double4 operator-=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs - rhs );
}

double4 operator*( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] * scalar,
		lhs[1] * scalar,
		lhs[2] * scalar,
		lhs[3] * scalar
	);
}

double4 operator*=( double4& lhs, const double scalar )
{
	return ( lhs = lhs * scalar );
}

double4 operator*( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x * rhs.x,
		lhs.y * rhs.y,
		lhs.z * rhs.z,
		lhs.w * rhs.w
	};
}

double4 operator*=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs * rhs );
}

double4 operator/( const double4& lhs, const double scalar )
{
	return double4(
		lhs[0] / scalar,
		lhs[1] / scalar,
		lhs[2] / scalar,
		lhs[3] / scalar
	);
}

double4 operator/=( double4& lhs, const double scalar )
{
	return ( lhs = lhs / scalar );
}

double4 operator/( const double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( double4 ) {
		lhs.x / rhs.x,
		lhs.y / rhs.y,
		lhs.z / rhs.z,
		lhs.w / rhs.w
	};
}

double4 operator/=( double4&& lhs, const double4& rhs )
{
	return ( lhs = lhs / rhs );
}

double4& operator++( double4& lhs )
{
	++lhs[0];
	++lhs[1];
	++lhs[2];
	++lhs[3];
	return lhs;
}

double4& operator++( double4& lhs, const int )
{
	lhs[0]++;
	lhs[1]++;
	lhs[2]++;
	lhs[3]++;
	return lhs;
}

double4& operator--( double4& lhs )
{
	--lhs[0];
	--lhs[1];
	--lhs[2];
	--lhs[3];
	return lhs;
}

double4& operator--( double4& lhs, const int )
{
	lhs[0]--;
	lhs[1]--;
	lhs[2]--;
	lhs[3]--;
	return lhs;
}

bool4 operator<( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x < rhs.x,
		lhs.y < rhs.y,
		lhs.z < rhs.z,
		lhs.w < rhs.w
	};
}

bool4 operator<=( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x <= rhs.x,
		lhs.y <= rhs.y,
		lhs.z <= rhs.z,
		lhs.w <= rhs.w
	};
}

bool4 operator>( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x > rhs.x,
		lhs.y > rhs.y,
		lhs.z > rhs.z,
		lhs.w > rhs.w
	};
}

bool4 operator>=( double4& lhs, const double4& rhs )
{
	return HLML_CONSTRUCT( bool4 ) {
		lhs.x >= rhs.x,
		lhs.y >= rhs.y,
		lhs.z >= rhs.z,
		lhs.w >= rhs.w
	};
}

