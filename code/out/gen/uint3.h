/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool3.h"

#include "../hlml_types.h"

#include "uint2.h"
struct uint4;

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

/// \brief A vector of 3 uint32_ts with components xyz.
/// Components are also stored as elements in an array via a union.
struct uint3
{
	union
	{
		struct
		{
			uint32_t x;
			uint32_t y;
			uint32_t z;
		};

		struct
		{
			uint32_t r;
			uint32_t g;
			uint32_t b;
		};

		uint32_t data[3] = { 0 };
	};

	/// Default constructor.  Initializes all values to zero.
	inline uint3();

	/// Initializes all components of the vector to the given scalar value.
	inline explicit uint3( const uint32_t x );

	/// Sets the xyz members of the vector to the corresponding parameters.
	inline uint3( const uint32_t x, const uint32_t y, const uint32_t z );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline uint3( const uint2& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline uint3( const uint3& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline uint3( const uint4& other );

	~uint3() {}

	/// Copies the elements of the given vector via a single memcpy.
	inline uint3 operator=( const uint2& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline uint3 operator=( const uint3& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline uint3 operator=( const uint4& rhs );

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline const uint32_t& operator[]( const uint32_t index ) const;

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 2.
	inline uint32_t& operator[]( const uint32_t index );

	// swizzle funcs
	inline uint2 xx() const;
	inline uint2 yx() const;
	inline uint2 xy() const;
	inline uint2 yy() const;
	inline uint3 xxx() const;
	inline uint3 yxx() const;
	inline uint3 zxx() const;
	inline uint3 xyx() const;
	inline uint3 yyx() const;
	inline uint3 zyx() const;
	inline uint3 xzx() const;
	inline uint3 yzx() const;
	inline uint3 zzx() const;
	inline uint3 xxy() const;
	inline uint3 yxy() const;
	inline uint3 zxy() const;
	inline uint3 xyy() const;
	inline uint3 yyy() const;
	inline uint3 zyy() const;
	inline uint3 xzy() const;
	inline uint3 yzy() const;
	inline uint3 zzy() const;
	inline uint3 xxz() const;
	inline uint3 yxz() const;
	inline uint3 zxz() const;
	inline uint3 xyz() const;
	inline uint3 yyz() const;
	inline uint3 zyz() const;
	inline uint3 xzz() const;
	inline uint3 yzz() const;
	inline uint3 zzz() const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

/// \relates uint3
/// \brief Returns true if the all the components of the left-hand-side uint3 match the other one, otherwise returns false.
inline bool operator==( const uint3& lhs, const uint3& rhs );

/// \relates uint3
/// \brief Returns true if not all of the components of the left-hand-side uint3 match the other one, otherwise returns false.
inline bool operator!=( const uint3& lhs, const uint3& rhs );

