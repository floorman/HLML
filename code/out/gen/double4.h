/*
===========================================================================

HLML.

MIT License

Copyright (c) 2019 Dan Moody

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===========================================================================
*/

// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL.
// EDITING THIS FILE MAY CAUSE SIDE EFFECTS.
// DO SO AT YOUR OWN RISK.

#pragma once

#include "bool4.h"

#include "../hlml_types.h"

#include "double2.h"
#include "double3.h"

// ignore prohibition of anymous structs for GCC
#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#elif defined( _MSC_VER )
#pragma warning( push )
#pragma warning( disable : 4201 ) // C4201 - nonstandard extension used : nameless struct/union
#endif

/// \brief A vector of 4 doubles with components xyzw.
/// Components are also stored as elements in an array via a union.
struct double4
{
	union
	{
		struct
		{
			double x;
			double y;
			double z;
			double w;
		};

		struct
		{
			double r;
			double g;
			double b;
			double a;
		};

		double data[4] = { 0 };
	};

	/// Default constructor.  Initializes all values to zero.
	inline double4();

	/// Initializes all components of the vector to the given scalar value.
	inline explicit double4( const double x );

	/// Sets the xyzw members of the vector to the corresponding parameters.
	inline double4( const double x, const double y, const double z, const double w );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline double4( const double2& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline double4( const double3& other );

	/// Copy constructor.  Copies the elements of the given vector via memcpy.
	inline double4( const double4& other );

	~double4() {}

	/// Copies the elements of the given vector via a single memcpy.
	inline double4 operator=( const double2& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline double4 operator=( const double3& rhs );

	/// Copies the elements of the given vector via a single memcpy.
	inline double4 operator=( const double4& rhs );

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 3.
	inline const double& operator[]( const uint32_t index ) const;

	/// \brief Returns the vector component at the given index.
	/// Index CANNOT be lower than 0 or higher than 3.
	inline double& operator[]( const uint32_t index );

	// swizzle funcs
	inline double2 xx() const;
	inline double2 yx() const;
	inline double2 xy() const;
	inline double2 yy() const;
	inline double3 xxx() const;
	inline double3 yxx() const;
	inline double3 zxx() const;
	inline double3 xyx() const;
	inline double3 yyx() const;
	inline double3 zyx() const;
	inline double3 xzx() const;
	inline double3 yzx() const;
	inline double3 zzx() const;
	inline double3 xxy() const;
	inline double3 yxy() const;
	inline double3 zxy() const;
	inline double3 xyy() const;
	inline double3 yyy() const;
	inline double3 zyy() const;
	inline double3 xzy() const;
	inline double3 yzy() const;
	inline double3 zzy() const;
	inline double3 xxz() const;
	inline double3 yxz() const;
	inline double3 zxz() const;
	inline double3 xyz() const;
	inline double3 yyz() const;
	inline double3 zyz() const;
	inline double3 xzz() const;
	inline double3 yzz() const;
	inline double3 zzz() const;
	inline double4 xxxx() const;
	inline double4 yxxx() const;
	inline double4 zxxx() const;
	inline double4 wxxx() const;
	inline double4 xyxx() const;
	inline double4 yyxx() const;
	inline double4 zyxx() const;
	inline double4 wyxx() const;
	inline double4 xzxx() const;
	inline double4 yzxx() const;
	inline double4 zzxx() const;
	inline double4 wzxx() const;
	inline double4 xwxx() const;
	inline double4 ywxx() const;
	inline double4 zwxx() const;
	inline double4 wwxx() const;
	inline double4 xxyx() const;
	inline double4 yxyx() const;
	inline double4 zxyx() const;
	inline double4 wxyx() const;
	inline double4 xyyx() const;
	inline double4 yyyx() const;
	inline double4 zyyx() const;
	inline double4 wyyx() const;
	inline double4 xzyx() const;
	inline double4 yzyx() const;
	inline double4 zzyx() const;
	inline double4 wzyx() const;
	inline double4 xwyx() const;
	inline double4 ywyx() const;
	inline double4 zwyx() const;
	inline double4 wwyx() const;
	inline double4 xxzx() const;
	inline double4 yxzx() const;
	inline double4 zxzx() const;
	inline double4 wxzx() const;
	inline double4 xyzx() const;
	inline double4 yyzx() const;
	inline double4 zyzx() const;
	inline double4 wyzx() const;
	inline double4 xzzx() const;
	inline double4 yzzx() const;
	inline double4 zzzx() const;
	inline double4 wzzx() const;
	inline double4 xwzx() const;
	inline double4 ywzx() const;
	inline double4 zwzx() const;
	inline double4 wwzx() const;
	inline double4 xxwx() const;
	inline double4 yxwx() const;
	inline double4 zxwx() const;
	inline double4 wxwx() const;
	inline double4 xywx() const;
	inline double4 yywx() const;
	inline double4 zywx() const;
	inline double4 wywx() const;
	inline double4 xzwx() const;
	inline double4 yzwx() const;
	inline double4 zzwx() const;
	inline double4 wzwx() const;
	inline double4 xwwx() const;
	inline double4 ywwx() const;
	inline double4 zwwx() const;
	inline double4 wwwx() const;
	inline double4 xxxy() const;
	inline double4 yxxy() const;
	inline double4 zxxy() const;
	inline double4 wxxy() const;
	inline double4 xyxy() const;
	inline double4 yyxy() const;
	inline double4 zyxy() const;
	inline double4 wyxy() const;
	inline double4 xzxy() const;
	inline double4 yzxy() const;
	inline double4 zzxy() const;
	inline double4 wzxy() const;
	inline double4 xwxy() const;
	inline double4 ywxy() const;
	inline double4 zwxy() const;
	inline double4 wwxy() const;
	inline double4 xxyy() const;
	inline double4 yxyy() const;
	inline double4 zxyy() const;
	inline double4 wxyy() const;
	inline double4 xyyy() const;
	inline double4 yyyy() const;
	inline double4 zyyy() const;
	inline double4 wyyy() const;
	inline double4 xzyy() const;
	inline double4 yzyy() const;
	inline double4 zzyy() const;
	inline double4 wzyy() const;
	inline double4 xwyy() const;
	inline double4 ywyy() const;
	inline double4 zwyy() const;
	inline double4 wwyy() const;
	inline double4 xxzy() const;
	inline double4 yxzy() const;
	inline double4 zxzy() const;
	inline double4 wxzy() const;
	inline double4 xyzy() const;
	inline double4 yyzy() const;
	inline double4 zyzy() const;
	inline double4 wyzy() const;
	inline double4 xzzy() const;
	inline double4 yzzy() const;
	inline double4 zzzy() const;
	inline double4 wzzy() const;
	inline double4 xwzy() const;
	inline double4 ywzy() const;
	inline double4 zwzy() const;
	inline double4 wwzy() const;
	inline double4 xxwy() const;
	inline double4 yxwy() const;
	inline double4 zxwy() const;
	inline double4 wxwy() const;
	inline double4 xywy() const;
	inline double4 yywy() const;
	inline double4 zywy() const;
	inline double4 wywy() const;
	inline double4 xzwy() const;
	inline double4 yzwy() const;
	inline double4 zzwy() const;
	inline double4 wzwy() const;
	inline double4 xwwy() const;
	inline double4 ywwy() const;
	inline double4 zwwy() const;
	inline double4 wwwy() const;
	inline double4 xxxz() const;
	inline double4 yxxz() const;
	inline double4 zxxz() const;
	inline double4 wxxz() const;
	inline double4 xyxz() const;
	inline double4 yyxz() const;
	inline double4 zyxz() const;
	inline double4 wyxz() const;
	inline double4 xzxz() const;
	inline double4 yzxz() const;
	inline double4 zzxz() const;
	inline double4 wzxz() const;
	inline double4 xwxz() const;
	inline double4 ywxz() const;
	inline double4 zwxz() const;
	inline double4 wwxz() const;
	inline double4 xxyz() const;
	inline double4 yxyz() const;
	inline double4 zxyz() const;
	inline double4 wxyz() const;
	inline double4 xyyz() const;
	inline double4 yyyz() const;
	inline double4 zyyz() const;
	inline double4 wyyz() const;
	inline double4 xzyz() const;
	inline double4 yzyz() const;
	inline double4 zzyz() const;
	inline double4 wzyz() const;
	inline double4 xwyz() const;
	inline double4 ywyz() const;
	inline double4 zwyz() const;
	inline double4 wwyz() const;
	inline double4 xxzz() const;
	inline double4 yxzz() const;
	inline double4 zxzz() const;
	inline double4 wxzz() const;
	inline double4 xyzz() const;
	inline double4 yyzz() const;
	inline double4 zyzz() const;
	inline double4 wyzz() const;
	inline double4 xzzz() const;
	inline double4 yzzz() const;
	inline double4 zzzz() const;
	inline double4 wzzz() const;
	inline double4 xwzz() const;
	inline double4 ywzz() const;
	inline double4 zwzz() const;
	inline double4 wwzz() const;
	inline double4 xxwz() const;
	inline double4 yxwz() const;
	inline double4 zxwz() const;
	inline double4 wxwz() const;
	inline double4 xywz() const;
	inline double4 yywz() const;
	inline double4 zywz() const;
	inline double4 wywz() const;
	inline double4 xzwz() const;
	inline double4 yzwz() const;
	inline double4 zzwz() const;
	inline double4 wzwz() const;
	inline double4 xwwz() const;
	inline double4 ywwz() const;
	inline double4 zwwz() const;
	inline double4 wwwz() const;
	inline double4 xxxw() const;
	inline double4 yxxw() const;
	inline double4 zxxw() const;
	inline double4 wxxw() const;
	inline double4 xyxw() const;
	inline double4 yyxw() const;
	inline double4 zyxw() const;
	inline double4 wyxw() const;
	inline double4 xzxw() const;
	inline double4 yzxw() const;
	inline double4 zzxw() const;
	inline double4 wzxw() const;
	inline double4 xwxw() const;
	inline double4 ywxw() const;
	inline double4 zwxw() const;
	inline double4 wwxw() const;
	inline double4 xxyw() const;
	inline double4 yxyw() const;
	inline double4 zxyw() const;
	inline double4 wxyw() const;
	inline double4 xyyw() const;
	inline double4 yyyw() const;
	inline double4 zyyw() const;
	inline double4 wyyw() const;
	inline double4 xzyw() const;
	inline double4 yzyw() const;
	inline double4 zzyw() const;
	inline double4 wzyw() const;
	inline double4 xwyw() const;
	inline double4 ywyw() const;
	inline double4 zwyw() const;
	inline double4 wwyw() const;
	inline double4 xxzw() const;
	inline double4 yxzw() const;
	inline double4 zxzw() const;
	inline double4 wxzw() const;
	inline double4 xyzw() const;
	inline double4 yyzw() const;
	inline double4 zyzw() const;
	inline double4 wyzw() const;
	inline double4 xzzw() const;
	inline double4 yzzw() const;
	inline double4 zzzw() const;
	inline double4 wzzw() const;
	inline double4 xwzw() const;
	inline double4 ywzw() const;
	inline double4 zwzw() const;
	inline double4 wwzw() const;
	inline double4 xxww() const;
	inline double4 yxww() const;
	inline double4 zxww() const;
	inline double4 wxww() const;
	inline double4 xyww() const;
	inline double4 yyww() const;
	inline double4 zyww() const;
	inline double4 wyww() const;
	inline double4 xzww() const;
	inline double4 yzww() const;
	inline double4 zzww() const;
	inline double4 wzww() const;
	inline double4 xwww() const;
	inline double4 ywww() const;
	inline double4 zwww() const;
	inline double4 wwww() const;
};

#if defined( __clang__ ) || defined( __GNUC__ )
#pragma GCC diagnostic pop
#elif defined( _MSC_VER )
#pragma warning( pop )
#endif

/// \relates double4
/// \brief Returns true if the all the components of the left-hand-side double4 match the other one, otherwise returns false.
inline bool operator==( const double4& lhs, const double4& rhs );

/// \relates double4
/// \brief Returns true if not all of the components of the left-hand-side double4 match the other one, otherwise returns false.
inline bool operator!=( const double4& lhs, const double4& rhs );

